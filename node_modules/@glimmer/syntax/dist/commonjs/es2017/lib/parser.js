'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Parser = undefined;

var _simpleHtmlTokenizer = require('simple-html-tokenizer');

var _util = require('@glimmer/util');

const entityParser = new _simpleHtmlTokenizer.EntityParser(_simpleHtmlTokenizer.HTML5NamedCharRefs);
class Parser {
    constructor(source, options = {}) {
        this.elementStack = [];
        this.currentAttribute = null;
        this.currentNode = null;
        this.tokenizer = new _simpleHtmlTokenizer.EventedTokenizer(this, entityParser);
        this.options = options;
        this.tokenizer['states'].tagOpen = function () {
            let char = this.consume();
            if (char === "!") {
                this.state = 'markupDeclaration';
            } else if (char === "/") {
                this.state = 'endTagOpen';
            } else if (/[A-Za-z]/.test(char)) {
                this.state = 'tagName';
                this.delegate.beginStartTag();
                this.delegate.appendToTagName(char);
            }
        };
        this.tokenizer['states'].endTagOpen = function () {
            let char = this.consume();
            if (/[A-Za-z]/.test(char)) {
                this.state = 'tagName';
                this.delegate.beginEndTag();
                this.delegate.appendToTagName(char);
            }
        };
        this.source = source.split(/(?:\r\n?|\n)/g);
    }
    get currentAttr() {
        return this.currentAttribute;
    }
    get currentTag() {
        let node = this.currentNode;
        (0, _util.assert)(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');
        return node;
    }
    get currentStartTag() {
        let node = this.currentNode;
        (0, _util.assert)(node && node.type === 'StartTag', 'expected start tag');
        return node;
    }
    get currentEndTag() {
        let node = this.currentNode;
        (0, _util.assert)(node && node.type === 'EndTag', 'expected end tag');
        return node;
    }
    get currentComment() {
        let node = this.currentNode;
        (0, _util.assert)(node && node.type === 'CommentStatement', 'expected a comment');
        return node;
    }
    get currentData() {
        let node = this.currentNode;
        (0, _util.assert)(node && node.type === 'TextNode', 'expected a text node');
        return node;
    }
    acceptNode(node) {
        return this[node.type](node);
    }
    currentElement() {
        return this.elementStack[this.elementStack.length - 1];
    }
    sourceForNode(node, endNode) {
        let firstLine = node.loc.start.line - 1;
        let currentLine = firstLine - 1;
        let firstColumn = node.loc.start.column;
        let string = [];
        let line;
        let lastLine;
        let lastColumn;
        if (endNode) {
            lastLine = endNode.loc.end.line - 1;
            lastColumn = endNode.loc.end.column;
        } else {
            lastLine = node.loc.end.line - 1;
            lastColumn = node.loc.end.column;
        }
        while (currentLine < lastLine) {
            currentLine++;
            line = this.source[currentLine];
            if (currentLine === firstLine) {
                if (firstLine === lastLine) {
                    string.push(line.slice(firstColumn, lastColumn));
                } else {
                    string.push(line.slice(firstColumn));
                }
            } else if (currentLine === lastLine) {
                string.push(line.slice(0, lastColumn));
            } else {
                string.push(line);
            }
        }
        return string.join('\n');
    }
}
exports.Parser = Parser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLEFBQU8sQUFDTCxBQUFnQixBQUNoQixBQUFZLEFBQ1osQUFBa0IsQUFBSSxBQUFhLEFBQ3BDLEFBQU0sQUFBdUIsQUFBQzs7QUFLL0IsQUFBTyxBQUFFLEFBQU0sQUFBRSxBQUFNLEFBQUUsQUFBTSxBQUFlLEFBQUM7O0FBRS9DLE1BQU0sQUFBWSxlQUFHLEFBQUksQUFBWSxBQUFDLEFBQWEsQUFBQyxBQUFDLEFBd0JyRCxBQUFNOztnQkFRUSxBQUFjLFFBQUUsVUFBa0IsQUFBRSxJQVB0QzthQUFZLGVBQWMsQUFBRSxBQUFDLEFBR2hDO2FBQWdCLG1CQUFzQixBQUFJLEFBQUMsQUFDM0M7YUFBVyxjQUE2RSxBQUFJLEFBQUMsQUFDN0Y7YUFBUyxZQUFHLEFBQUksQUFBZ0IsMENBQUMsQUFBSSxNQUFFLEFBQVksQUFBQyxBQUFDLEFBRzFELEFBQUk7YUFBQyxBQUFPLFVBQUcsQUFBTyxBQUFDLEFBRXZCLEFBQUk7YUFBQyxBQUFTLFVBQUMsQUFBUSxBQUFDLFVBQUMsQUFBTyxVQUFHLFlBQ2pDO2dCQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBTyxBQUFFLEFBQUMsQUFDMUIsQUFBRSxBQUFDO2dCQUFDLEFBQUksU0FBSyxBQUFHLEFBQUMsS0FBQyxBQUFDLEFBQ2pCLEFBQUk7cUJBQUMsQUFBSyxRQUFHLEFBQW1CLEFBQUMsQUFDbkMsQUFBQyxBQUFDLEFBQUk7dUJBQUssQUFBSSxTQUFLLEFBQUcsQUFBQyxLQUFDLEFBQUMsQUFDeEIsQUFBSTtxQkFBQyxBQUFLLFFBQUcsQUFBWSxBQUFDLEFBQzVCLEFBQUMsQUFBQyxBQUFJO0FBRkMsQUFBRSxBQUFDLG1CQUVILEFBQUUsQUFBQyxJQUFDLEFBQVUsV0FBQyxBQUFJLEtBQUMsQUFB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QUFDLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQVcsQUFBQyxBQUFDLEFBQUMsQUFDdkMsQUFBQyxBQUNIO0FBQUMsQUFBQyxBQUFJO3VCQUFLLEFBQVcsZ0JBQUssQUFBUSxBQUFDLFVBQUMsQUFBQyxBQUNwQyxBQUFNO3VCQUFDLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUMsR0FBRSxBQUFVLEFBQUMsQUFBQyxBQUFDLEFBQ3pDLEFBQUMsQUFBQyxBQUFJO0FBRkMsQUFBRSxBQUFDLG1CQUVILEFBQUMsQUFDTixBQUFNO3VCQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQyxBQUNwQixBQUFDLEFBQ0g7QUFBQztBQUVELEFBQU07ZUFBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQzNCLEFBQUMsQUFDRjs7QUE5R0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBFdmVudGVkVG9rZW5pemVyLFxuICBFbnRpdHlQYXJzZXIsXG4gIEhUTUw1TmFtZWRDaGFyUmVmcyBhcyBuYW1lZENoYXJSZWZzXG59IGZyb20gXCJzaW1wbGUtaHRtbC10b2tlbml6ZXJcIjtcbmltcG9ydCB7IFByb2dyYW0gfSBmcm9tIFwiLi90eXBlcy9ub2Rlc1wiO1xuaW1wb3J0ICogYXMgQVNUIGZyb20gXCIuL3R5cGVzL25vZGVzXCI7XG5pbXBvcnQgKiBhcyBIYW5kbGViYXJzQVNUIGZyb20gJy4vdHlwZXMvaGFuZGxlYmFycy1hc3QnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBhc3NlcnQsIGV4cGVjdCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5jb25zdCBlbnRpdHlQYXJzZXIgPSBuZXcgRW50aXR5UGFyc2VyKG5hbWVkQ2hhclJlZnMpO1xuXG5leHBvcnQgdHlwZSBFbGVtZW50ID0gQVNULlByb2dyYW0gfCBBU1QuRWxlbWVudE5vZGU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnPFQgZXh0ZW5kcyAnU3RhcnRUYWcnIHwgJ0VuZFRhZyc+IHtcbiAgdHlwZTogVDtcbiAgbmFtZTogc3RyaW5nO1xuICBhdHRyaWJ1dGVzOiBhbnlbXTtcbiAgbW9kaWZpZXJzOiBhbnlbXTtcbiAgY29tbWVudHM6IGFueVtdO1xuICBzZWxmQ2xvc2luZzogYm9vbGVhbjtcbiAgbG9jOiBBU1QuU291cmNlTG9jYXRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXR0cmlidXRlIHtcbiAgbmFtZTogc3RyaW5nO1xuICBwYXJ0czogKEFTVC5NdXN0YWNoZVN0YXRlbWVudCB8IEFTVC5UZXh0Tm9kZSlbXTtcbiAgaXNRdW90ZWQ6IGJvb2xlYW47XG4gIGlzRHluYW1pYzogYm9vbGVhbjtcbiAgc3RhcnQ6IEFTVC5Qb3NpdGlvbjtcbiAgdmFsdWVTdGFydExpbmU6IG51bWJlcjtcbiAgdmFsdWVTdGFydENvbHVtbjogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgUGFyc2VyIHtcbiAgcHJvdGVjdGVkIGVsZW1lbnRTdGFjazogRWxlbWVudFtdID0gW107XG4gIHByaXZhdGUgb3B0aW9uczogT2JqZWN0O1xuICBwcml2YXRlIHNvdXJjZTogc3RyaW5nW107XG4gIHB1YmxpYyBjdXJyZW50QXR0cmlidXRlOiBPcHRpb248QXR0cmlidXRlPiA9IG51bGw7XG4gIHB1YmxpYyBjdXJyZW50Tm9kZTogT3B0aW9uPEFTVC5Db21tZW50U3RhdGVtZW50IHwgQVNULlRleHROb2RlIHwgVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz4+ID0gbnVsbDtcbiAgcHVibGljIHRva2VuaXplciA9IG5ldyBFdmVudGVkVG9rZW5pemVyKHRoaXMsIGVudGl0eVBhcnNlcik7XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBzdHJpbmcsIG9wdGlvbnM6IE9iamVjdCA9IHt9KSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMudG9rZW5pemVyWydzdGF0ZXMnXS50YWdPcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgY2hhciA9IHRoaXMuY29uc3VtZSgpO1xuICAgICAgaWYgKGNoYXIgPT09IFwiIVwiKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAnbWFya3VwRGVjbGFyYXRpb24nO1xuICAgICAgfSBlbHNlIGlmIChjaGFyID09PSBcIi9cIikge1xuICAgICAgICB0aGlzLnN0YXRlID0gJ2VuZFRhZ09wZW4nO1xuICAgICAgfSBlbHNlIGlmICgvW0EtWmEtel0vLnRlc3QoY2hhcikpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICd0YWdOYW1lJztcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5iZWdpblN0YXJ0VGFnKCk7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuYXBwZW5kVG9UYWdOYW1lKGNoYXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRva2VuaXplclsnc3RhdGVzJ10uZW5kVGFnT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBjaGFyID0gdGhpcy5jb25zdW1lKCk7XG4gICAgICBpZiAoL1tBLVphLXpdLy50ZXN0KGNoYXIpKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAndGFnTmFtZSc7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuYmVnaW5FbmRUYWcoKTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5hcHBlbmRUb1RhZ05hbWUoY2hhcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc291cmNlID0gc291cmNlLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG4gIH1cblxuICBnZXQgY3VycmVudEF0dHIoKTogQXR0cmlidXRlIHtcbiAgICByZXR1cm4gZXhwZWN0KHRoaXMuY3VycmVudEF0dHJpYnV0ZSwgJ2V4cGVjdGVkIGF0dHJpYnV0ZScpO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRUYWcoKTogVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiAobm9kZS50eXBlID09PSAnU3RhcnRUYWcnIHx8IG5vZGUudHlwZSA9PT0gJ0VuZFRhZycpLCAnZXhwZWN0ZWQgdGFnJyk7XG4gICAgcmV0dXJuIG5vZGUgYXMgVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudFN0YXJ0VGFnKCk6IFRhZzwnU3RhcnRUYWcnPiB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgIGFzc2VydChub2RlICYmIG5vZGUudHlwZSA9PT0gJ1N0YXJ0VGFnJywgJ2V4cGVjdGVkIHN0YXJ0IHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnU3RhcnRUYWcnPjtcbiAgfVxuXG4gIGdldCBjdXJyZW50RW5kVGFnKCk6IFRhZzwnRW5kVGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdFbmRUYWcnLCAnZXhwZWN0ZWQgZW5kIHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnRW5kVGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudENvbW1lbnQoKTogQVNULkNvbW1lbnRTdGF0ZW1lbnQge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdDb21tZW50U3RhdGVtZW50JywgJ2V4cGVjdGVkIGEgY29tbWVudCcpO1xuICAgIHJldHVybiBub2RlIGFzIEFTVC5Db21tZW50U3RhdGVtZW50O1xuICB9XG5cbiAgZ2V0IGN1cnJlbnREYXRhKCk6IEFTVC5UZXh0Tm9kZSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgIGFzc2VydChub2RlICYmIG5vZGUudHlwZSA9PT0gJ1RleHROb2RlJywgJ2V4cGVjdGVkIGEgdGV4dCBub2RlJyk7XG4gICAgcmV0dXJuIG5vZGUgYXMgQVNULlRleHROb2RlO1xuXG4gIH1cblxuICBhY2NlcHROb2RlKG5vZGU6IEhhbmRsZWJhcnNBU1QuUHJvZ3JhbSk6IFByb2dyYW07XG4gIGFjY2VwdE5vZGU8VSBleHRlbmRzIEFTVC5Ob2RlPihub2RlOiBIYW5kbGViYXJzQVNULk5vZGUpOiBVO1xuICBhY2NlcHROb2RlKG5vZGU6IEhhbmRsZWJhcnNBU1QuTm9kZSk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXNbbm9kZS50eXBlXShub2RlKTtcbiAgfVxuXG4gIGN1cnJlbnRFbGVtZW50KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRTdGFja1t0aGlzLmVsZW1lbnRTdGFjay5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHNvdXJjZUZvck5vZGUobm9kZTogSGFuZGxlYmFyc0FTVC5Ob2RlLCBlbmROb2RlPzogeyBsb2M6IEhhbmRsZWJhcnNBU1QuU291cmNlTG9jYXRpb24gfSk6IHN0cmluZyB7XG4gICAgbGV0IGZpcnN0TGluZSA9IG5vZGUubG9jLnN0YXJ0LmxpbmUgLSAxO1xuICAgIGxldCBjdXJyZW50TGluZSA9IGZpcnN0TGluZSAtIDE7XG4gICAgbGV0IGZpcnN0Q29sdW1uID0gbm9kZS5sb2Muc3RhcnQuY29sdW1uO1xuICAgIGxldCBzdHJpbmcgPSBbXTtcbiAgICBsZXQgbGluZTtcblxuICAgIGxldCBsYXN0TGluZTogbnVtYmVyO1xuICAgIGxldCBsYXN0Q29sdW1uOiBudW1iZXI7XG5cbiAgICBpZiAoZW5kTm9kZSkge1xuICAgICAgbGFzdExpbmUgPSBlbmROb2RlLmxvYy5lbmQubGluZSAtIDE7XG4gICAgICBsYXN0Q29sdW1uID0gZW5kTm9kZS5sb2MuZW5kLmNvbHVtbjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdExpbmUgPSBub2RlLmxvYy5lbmQubGluZSAtIDE7XG4gICAgICBsYXN0Q29sdW1uID0gbm9kZS5sb2MuZW5kLmNvbHVtbjtcbiAgICB9XG5cbiAgICB3aGlsZSAoY3VycmVudExpbmUgPCBsYXN0TGluZSkge1xuICAgICAgY3VycmVudExpbmUrKztcbiAgICAgIGxpbmUgPSB0aGlzLnNvdXJjZVtjdXJyZW50TGluZV07XG5cbiAgICAgIGlmIChjdXJyZW50TGluZSA9PT0gZmlyc3RMaW5lKSB7XG4gICAgICAgIGlmIChmaXJzdExpbmUgPT09IGxhc3RMaW5lKSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2gobGluZS5zbGljZShmaXJzdENvbHVtbiwgbGFzdENvbHVtbikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cmluZy5wdXNoKGxpbmUuc2xpY2UoZmlyc3RDb2x1bW4pKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50TGluZSA9PT0gbGFzdExpbmUpIHtcbiAgICAgICAgc3RyaW5nLnB1c2gobGluZS5zbGljZSgwLCBsYXN0Q29sdW1uKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJpbmcucHVzaChsaW5lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nLmpvaW4oJ1xcbicpO1xuICB9XG59XG4iXX0=