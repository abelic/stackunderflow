function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Walker = function () {
    function Walker(order) {
        _classCallCheck(this, Walker);

        this.order = order;
        this.stack = [];
    }

    Walker.prototype.visit = function visit(node, callback) {
        if (!node) {
            return;
        }
        this.stack.push(node);
        if (this.order === 'post') {
            this.children(node, callback);
            callback(node, this);
        } else {
            callback(node, this);
            this.children(node, callback);
        }
        this.stack.pop();
    };

    Walker.prototype.children = function children(node, callback) {
        var visitor = visitors[node.type];
        if (visitor) {
            visitor(this, node, callback);
        }
    };

    return Walker;
}();

export default Walker;

var visitors = {
    Program: function Program(walker, node, callback) {
        for (var i = 0; i < node.body.length; i++) {
            walker.visit(node.body[i], callback);
        }
    },
    ElementNode: function ElementNode(walker, node, callback) {
        for (var i = 0; i < node.children.length; i++) {
            walker.visit(node.children[i], callback);
        }
    },
    BlockStatement: function BlockStatement(walker, node, callback) {
        walker.visit(node.program, callback);
        walker.visit(node.inverse || null, callback);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Fsa2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi90cmF2ZXJzYWwvd2Fsa2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0lBT0U7b0JBQW1CLEFBQVc7QUFBWDs7YUFBSyxRQURqQixBQUNZLEFBQUssQUFBTTthQURsQixRQUFVLEFBQUUsQUFBQyxBQUNRLEFBQUM7QUFFbEMsQUFBSzs7NENBQXFCLEFBQWUsTUFBRSxBQUF5QixVQUNsRSxBQUFFLEFBQUM7WUFBQyxDQUFDLEFBQUksQUFBQyxNQUFDLEFBQUMsQUFDVixBQUFNLEFBQUMsQUFDVDtBQUFDO0FBRUQsQUFBSTthQUFDLEFBQUssTUFBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUMsQUFFdEIsQUFBRSxBQUFDO1lBQUMsQUFBSSxLQUFDLEFBQUssVUFBSyxBQUFNLEFBQUMsUUFBQyxBQUFDLEFBQzFCLEFBQUk7aUJBQUMsQUFBUSxTQUFDLEFBQUksTUFBRSxBQUFRLEFBQUMsQUFBQyxBQUM5QixBQUFRO3FCQUFDLEFBQUksTUFBRSxBQUFJLEFBQUMsQUFBQyxBQUN2QixBQUFDLEFBQUMsQUFBSTtlQUFDLEFBQUMsQUFDTixBQUFRO3FCQUFDLEFBQUksTUFBRSxBQUFJLEFBQUMsQUFBQyxBQUNyQixBQUFJO2lCQUFDLEFBQVEsU0FBQyxBQUFJLE1BQUUsQUFBUSxBQUFDLEFBQUMsQUFDaEMsQUFBQztBQUVELEFBQUk7YUFBQyxBQUFLLE1BQUMsQUFBRyxBQUFFLEFBQUMsQUFDbkIsQUFBQztBQUVELEFBQVE7O2tEQUFDLEFBQVMsTUFBRSxBQUFhLFVBQy9CO1lBQUksQUFBTyxVQUFHLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUMsQUFDbEMsQUFBRSxBQUFDO1lBQUMsQUFBTyxBQUFDLFNBQUMsQUFBQyxBQUNaLEFBQU87b0JBQUMsQUFBSSxNQUFFLEFBQUksTUFBRSxBQUFRLEFBQUMsQUFBQyxBQUNoQyxBQUFDLEFBQ0g7QUFBQyxBQUNGOzs7Ozs7OztBQUVELElBQUksQUFBUTs4QkFDRixBQUFjLFFBQUUsQUFBaUIsTUFBRSxBQUFnQyxVQUN6RSxBQUFHLEFBQUM7YUFBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUMsQUFDMUMsQUFBTTttQkFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFDLEFBQUMsSUFBRSxBQUFRLEFBQUMsQUFBQyxBQUN2QyxBQUFDLEFBQ0g7QUFBQztBQUVELEFBQVc7c0NBQUMsQUFBYyxRQUFFLEFBQXFCLE1BQUUsQUFBZ0MsVUFDakYsQUFBRyxBQUFDO2FBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQU0sUUFBRSxBQUFDLEFBQUUsS0FBRSxBQUFDLEFBQzlDLEFBQU07bUJBQUMsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBQyxBQUFDLElBQUUsQUFBUSxBQUFDLEFBQUMsQUFDM0MsQUFBQyxBQUNIO0FBQUM7QUFFRCxBQUFjOzRDQUFDLEFBQWMsUUFBRSxBQUF3QixNQUFFLEFBQW1DLFVBQzFGLEFBQU07ZUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQU8sU0FBRSxBQUFRLEFBQUMsQUFBQyxBQUNyQyxBQUFNO2VBQUMsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFPLFdBQUksQUFBSSxNQUFFLEFBQVEsQUFBQyxBQUFDLEFBQy9DLEFBQUMsQUFDRixBQUFDO0FBakJhO0FBQ2IsQUFBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFTVCB9IGZyb20gXCJAZ2xpbW1lci9zeW50YXhcIjtcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAZ2xpbW1lci9pbnRlcmZhY2VzXCI7XG5cbmV4cG9ydCB0eXBlIE5vZGVDYWxsYmFjazxOIGV4dGVuZHMgQVNULk5vZGU+ID0gKG5vZGU6IE4sIHdhbGtlcjogV2Fsa2VyKSA9PiB2b2lkO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYWxrZXIge1xuICBwdWJsaWMgc3RhY2s6IGFueVtdID0gW107XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBvcmRlcj86IGFueSkge31cblxuICB2aXNpdDxOIGV4dGVuZHMgQVNULk5vZGU+KG5vZGU6IE9wdGlvbjxOPiwgY2FsbGJhY2s6IE5vZGVDYWxsYmFjazxOPikge1xuICAgIGlmICghbm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhY2sucHVzaChub2RlKTtcblxuICAgIGlmICh0aGlzLm9yZGVyID09PSAncG9zdCcpIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4obm9kZSwgY2FsbGJhY2spO1xuICAgICAgY2FsbGJhY2sobm9kZSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUsIHRoaXMpO1xuICAgICAgdGhpcy5jaGlsZHJlbihub2RlLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgfVxuXG4gIGNoaWxkcmVuKG5vZGU6IGFueSwgY2FsbGJhY2s6IGFueSkge1xuICAgIGxldCB2aXNpdG9yID0gdmlzaXRvcnNbbm9kZS50eXBlXTtcbiAgICBpZiAodmlzaXRvcikge1xuICAgICAgdmlzaXRvcih0aGlzLCBub2RlLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59XG5cbmxldCB2aXNpdG9ycyA9IHtcbiAgUHJvZ3JhbSh3YWxrZXI6IFdhbGtlciwgbm9kZTogQVNULlByb2dyYW0sIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8QVNULk5vZGU+KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHdhbGtlci52aXNpdChub2RlLmJvZHlbaV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgRWxlbWVudE5vZGUod2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5FbGVtZW50Tm9kZSwgY2FsbGJhY2s6IE5vZGVDYWxsYmFjazxBU1QuTm9kZT4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHdhbGtlci52aXNpdChub2RlLmNoaWxkcmVuW2ldLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIEJsb2NrU3RhdGVtZW50KHdhbGtlcjogV2Fsa2VyLCBub2RlOiBBU1QuQmxvY2tTdGF0ZW1lbnQsIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8QVNULlByb2dyYW0+KSB7XG4gICAgd2Fsa2VyLnZpc2l0KG5vZGUucHJvZ3JhbSwgY2FsbGJhY2spO1xuICAgIHdhbGtlci52aXNpdChub2RlLmludmVyc2UgfHwgbnVsbCwgY2FsbGJhY2spO1xuICB9XG59O1xuIl19