'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Stack = exports.DictSet = undefined;
exports.dict = dict;

var _guid = require('./guid');

let proto = Object.create(null, {
    // without this, we will always still end up with (new
    // EmptyObject()).constructor === Object
    constructor: {
        value: undefined,
        enumerable: false,
        writable: true
    }
});
function EmptyObject() {}
EmptyObject.prototype = proto;
function dict() {
    // let d = Object.create(null);
    // d.x = 1;
    // delete d.x;
    // return d;
    return new EmptyObject();
}
class DictSet {
    constructor() {
        this.dict = dict();
    }
    add(obj) {
        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[(0, _guid.ensureGuid)(obj)] = obj;
        return this;
    }
    delete(obj) {
        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
    }
}
exports.DictSet = DictSet;
class Stack {
    constructor() {
        this.stack = [];
        this.current = null;
    }
    push(item) {
        this.current = item;
        this.stack.push(item);
    }
    pop() {
        let item = this.stack.pop();
        let len = this.stack.length;
        this.current = len === 0 ? null : this.stack[len - 1];
        return item === undefined ? null : item;
    }
    isEmpty() {
        return this.stack.length === 0;
    }
}
exports.Stack = Stack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci91dGlsL2xpYi9jb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLEFBQU8sQUFBVyxBQUFVLEFBQUUsQUFBTSxBQUFRLEFBQUM7O0FBWTdDLElBQUksQUFBSyxlQUFVLEFBQU0sT0FBQyxBQUFJO0FBRTVCLEFBQXdDO0FBQ3hDLEFBQVc7O2VBQ0YsQUFBUyxBQUNoQixBQUFVO29CQUFFLEFBQUssQUFDakIsQUFBUTtrQkFOQSxBQUFNLEFBQWMsQUFHakIsQUFHRCxBQUFJLEFBQ2YsQUFDRixBQUFDLEFBQUM7QUFKQyxBQUFLO0FBSFAsQUFBc0Q7QUFTeEQsdUJBQXdCLEFBQUM7QUFDekIsQUFBVyxZQUFDLEFBQVMsWUFBRyxBQUFLLEFBQUMsQUFFOUIsQUFBTTtnQkFDSixBQUErQjtBQUMvQixBQUFXO0FBQ1gsQUFBYztBQUNkLEFBQVk7QUFDWixBQUFNO1dBQUMsSUFBSyxBQUFtQixBQUFFLEFBQUMsQUFDcEMsQUFBQztBQUlELEFBQU07O2tCQUlGLEFBQUk7YUFBQyxBQUFJLE9BQUcsQUFBSSxBQUFLLEFBQUMsQUFDeEIsQUFBQztBQUVELEFBQUc7UUFBQyxBQUFNLEtBQ1IsQUFBRSxBQUFDO1lBQUMsT0FBTyxBQUFHLFFBQUssQUFBUSxBQUFDLFVBQUMsQUFBSSxLQUFDLEFBQUksS0FBTSxBQUFHLEFBQUMsT0FBRyxBQUFHLEFBQUMsQUFDdkQsQUFBSSxTQUFDLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBVSxzQkFBTSxBQUFHLEFBQUMsQUFBQyxRQUFHLEFBQUcsQUFBQyxBQUMzQyxBQUFNO2VBQUMsQUFBSSxBQUFDLEFBQ2QsQUFBQztBQUVELEFBQU07V0FBQyxBQUFNLEtBQ1gsQUFBRSxBQUFDO1lBQUMsT0FBTyxBQUFHLFFBQUssQUFBUSxBQUFDLFVBQUMsT0FBTyxBQUFJLEtBQUMsQUFBSSxLQUFNLEFBQUcsQUFBQyxBQUFDLEFBQ3hELEFBQUksVUFBQyxBQUFFLEFBQUMsSUFBRSxBQUFXLElBQUMsQUFBSyxBQUFDLE9BQUMsT0FBTyxBQUFJLEtBQUMsQUFBSSxLQUFFLEFBQVcsSUFBQyxBQUFLLEFBQUMsQUFBQyxBQUNwRSxBQUFDLEFBQ0Y7QUFFRCxBQUFNO0FBaEJKOzs7a0JBaUJRO2FBQUssUUFBUSxBQUFFLEFBQUMsQUFDakI7YUFBTyxVQUFjLEFBQUksQUFBQyxBQWtCbkMsQUFBQztBQWhCQyxBQUFJO1NBQUMsQUFBTyxNQUNWLEFBQUk7YUFBQyxBQUFPLFVBQUcsQUFBSSxBQUFDLEFBQ3BCLEFBQUk7YUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ3hCLEFBQUM7QUFFRCxBQUFHO1VBQ0Q7WUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEFBQUUsQUFBQyxBQUM1QjtZQUFJLEFBQUcsTUFBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sQUFBQyxBQUM1QixBQUFJO2FBQUMsQUFBTyxVQUFHLEFBQUcsUUFBSyxBQUFDLElBQUcsQUFBSSxPQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBRyxNQUFHLEFBQUMsQUFBQyxBQUFDLEFBRXRELEFBQU07ZUFBQyxBQUFJLFNBQUssQUFBUyxZQUFHLEFBQUksT0FBRyxBQUFJLEFBQUMsQUFDMUMsQUFBQztBQUVELEFBQU87Y0FDTCxBQUFNO2VBQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFNLFdBQUssQUFBQyxBQUFDLEFBQ2pDLEFBQUMsQUFDRjs7QUFwQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Q8VD4ge1xuICBbaW5kZXg6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0PFQ+IHtcbiAgYWRkKHZhbHVlOiBUKTogU2V0PFQ+O1xuICBkZWxldGUodmFsdWU6IFQpOiB2b2lkO1xufVxuXG5sZXQgcHJvdG8gPSBPYmplY3QuY3JlYXRlKG51bGwsIHtcbiAgLy8gd2l0aG91dCB0aGlzLCB3ZSB3aWxsIGFsd2F5cyBzdGlsbCBlbmQgdXAgd2l0aCAobmV3XG4gIC8vIEVtcHR5T2JqZWN0KCkpLmNvbnN0cnVjdG9yID09PSBPYmplY3RcbiAgY29uc3RydWN0b3I6IHtcbiAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBFbXB0eU9iamVjdCgpIHt9XG5FbXB0eU9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpY3Q8VD4oKTogRGljdDxUPiB7XG4gIC8vIGxldCBkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gZC54ID0gMTtcbiAgLy8gZGVsZXRlIGQueDtcbiAgLy8gcmV0dXJuIGQ7XG4gIHJldHVybiBuZXcgKEVtcHR5T2JqZWN0IGFzIGFueSkoKTtcbn1cblxuZXhwb3J0IHR5cGUgU2V0TWVtYmVyID0gSGFzR3VpZCB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIERpY3RTZXQ8VCBleHRlbmRzIFNldE1lbWJlcj4gaW1wbGVtZW50cyBTZXQ8VD4ge1xuICBwcml2YXRlIGRpY3Q6IERpY3Q8VD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kaWN0ID0gZGljdDxUPigpO1xuICB9XG5cbiAgYWRkKG9iajogVCk6IFNldDxUPiB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB0aGlzLmRpY3RbPGFueT5vYmpdID0gb2JqO1xuICAgIGVsc2UgdGhpcy5kaWN0W2Vuc3VyZUd1aWQoPGFueT5vYmopXSA9IG9iajtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlbGV0ZShvYmo6IFQpIHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIGRlbGV0ZSB0aGlzLmRpY3RbPGFueT5vYmpdO1xuICAgIGVsc2UgaWYgKChvYmogYXMgYW55KS5fZ3VpZCkgZGVsZXRlIHRoaXMuZGljdFsob2JqIGFzIGFueSkuX2d1aWRdO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGFjazxUPiB7XG4gIHByaXZhdGUgc3RhY2s6IFRbXSA9IFtdO1xuICBwdWJsaWMgY3VycmVudDogT3B0aW9uPFQ+ID0gbnVsbDtcblxuICBwdXNoKGl0ZW06IFQpIHtcbiAgICB0aGlzLmN1cnJlbnQgPSBpdGVtO1xuICAgIHRoaXMuc3RhY2sucHVzaChpdGVtKTtcbiAgfVxuXG4gIHBvcCgpOiBPcHRpb248VD4ge1xuICAgIGxldCBpdGVtID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICBsZXQgbGVuID0gdGhpcy5zdGFjay5sZW5ndGg7XG4gICAgdGhpcy5jdXJyZW50ID0gbGVuID09PSAwID8gbnVsbCA6IHRoaXMuc3RhY2tbbGVuIC0gMV07XG5cbiAgICByZXR1cm4gaXRlbSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGl0ZW07XG4gIH1cblxuICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrLmxlbmd0aCA9PT0gMDtcbiAgfVxufVxuIl19