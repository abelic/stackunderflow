"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
class ListNode {
    constructor(value) {
        this.next = null;
        this.prev = null;
        this.value = value;
    }
}
exports.ListNode = ListNode;
class LinkedList {
    constructor() {
        this.clear();
    }
    head() {
        return this._head;
    }
    tail() {
        return this._tail;
    }
    clear() {
        this._head = this._tail = null;
    }
    toArray() {
        let out = [];
        this.forEachNode(n => out.push(n));
        return out;
    }
    nextNode(node) {
        return node.next;
    }
    forEachNode(callback) {
        let node = this._head;
        while (node !== null) {
            callback(node);
            node = node.next;
        }
    }
    insertBefore(node, reference = null) {
        if (reference === null) return this.append(node);
        if (reference.prev) reference.prev.next = node;else this._head = node;
        node.prev = reference.prev;
        node.next = reference;
        reference.prev = node;
        return node;
    }
    append(node) {
        let tail = this._tail;
        if (tail) {
            tail.next = node;
            node.prev = tail;
            node.next = null;
        } else {
            this._head = node;
        }
        return this._tail = node;
    }
    remove(node) {
        if (node.prev) node.prev.next = node.next;else this._head = node.next;
        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
        return node;
    }
}
exports.LinkedList = LinkedList;
class ListSlice {
    constructor(head, tail) {
        this._head = head;
        this._tail = tail;
    }
    forEachNode(callback) {
        let node = this._head;
        while (node !== null) {
            callback(node);
            node = this.nextNode(node);
        }
    }
    head() {
        return this._head;
    }
    tail() {
        return this._tail;
    }
    toArray() {
        let out = [];
        this.forEachNode(n => out.push(n));
        return out;
    }
    nextNode(node) {
        if (node === this._tail) return null;
        return node.next;
    }
}
exports.ListSlice = ListSlice;
const EMPTY_SLICE = exports.EMPTY_SLICE = new ListSlice(null, null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2xpc3QtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O2dCQVljLEFBQVEsT0FKYjthQUFJLE9BQXdCLEFBQUksQUFBQyxBQUNqQzthQUFJLE9BQXdCLEFBQUksQUFBQyxBQUl0QyxBQUFJO2FBQUMsQUFBSyxRQUFHLEFBQUssQUFBQyxBQUNyQixBQUFDLEFBQ0Y7QUFNRCxBQUFNO0FBVEo7OztrQkFlRSxBQUFJO2FBQUMsQUFBSyxBQUFFLEFBQUMsQUFDZixBQUFDO0FBRUQsQUFBSTtXQUNGLEFBQU07ZUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQ3BCLEFBQUM7QUFFRCxBQUFJO1dBQ0YsQUFBTTtlQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFDcEIsQUFBQztBQUVELEFBQUs7WUFDSCxBQUFJO2FBQUMsQUFBSyxRQUFHLEFBQUksS0FBQyxBQUFLLFFBQUcsQUFBSSxBQUFDLEFBQ2pDLEFBQUM7QUFFRCxBQUFPO2NBQ0w7WUFBSSxBQUFHLE1BQVEsQUFBRSxBQUFDLEFBQ2xCLEFBQUk7YUFBQyxBQUFXLFlBQUMsQUFBQyxLQUFJLEFBQUcsSUFBQyxBQUFJLEtBQUMsQUFBQyxBQUFDLEFBQUMsQUFBQyxBQUNuQyxBQUFNO2VBQUMsQUFBRyxBQUFDLEFBQ2IsQUFBQztBQUVELEFBQVE7YUFBQyxBQUFPLE1BQ2QsQUFBTTtlQUFRLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFDMUIsQUFBQztBQUVELEFBQVc7Z0JBQUMsQUFBMkIsVUFDckM7WUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUV0QjtlQUFPLEFBQUksU0FBSyxBQUFJLE1BQUUsQUFBQyxBQUNyQixBQUFRO3FCQUFRLEFBQUksQUFBQyxBQUFDLEFBQ3RCLEFBQUk7bUJBQVUsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUMx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LEFBQUssQUFBQyxPQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUMsQUFDckMsQUFBTTtlQUFDLEFBQUksS0FBQyxBQUFTLEFBQUMsQUFDeEIsQUFBQyxBQUNGO0FBRUQsQUFBTTtBQWxDSjs7QUFrQ0ssTUFBTSxBQUFXLG9DQUFHLElBQUksQUFBUyxVQUFDLEFBQUksTUFBRSxBQUFJLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExpbmtlZExpc3ROb2RlIHtcbiAgbmV4dDogT3B0aW9uPExpbmtlZExpc3ROb2RlPjtcbiAgcHJldjogT3B0aW9uPExpbmtlZExpc3ROb2RlPjtcbn1cblxuZXhwb3J0IGNsYXNzIExpc3ROb2RlPFQ+IGltcGxlbWVudHMgTGlua2VkTGlzdE5vZGUge1xuICBwdWJsaWMgbmV4dDogT3B0aW9uPExpc3ROb2RlPFQ+PiA9IG51bGw7XG4gIHB1YmxpYyBwcmV2OiBPcHRpb248TGlzdE5vZGU8VD4+ID0gbnVsbDtcbiAgcHVibGljIHZhbHVlOiBUO1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG5cbi8vIHdlIGFyZSB1bmFibGUgdG8gZXhwcmVzcyB0aGUgY29uc3RyYWludCB0aGF0IFQncyAucHJldiBhbmQgLm5leHQgYXJlXG4vLyB0aGVtc2VsdmVzIFQuIEhvd2V2ZXIsIGl0IHdpbGwgYWx3YXlzIGJlIHRydWUsIHNvIHRydXN0IHVzLlxudHlwZSB0cnVzdCA9IGFueTtcblxuZXhwb3J0IGNsYXNzIExpbmtlZExpc3Q8VCBleHRlbmRzIExpbmtlZExpc3ROb2RlPiBpbXBsZW1lbnRzIFNsaWNlPFQ+IHtcblxuICBwcml2YXRlIF9oZWFkOiBPcHRpb248VD47XG4gIHByaXZhdGUgX3RhaWw6IE9wdGlvbjxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICBoZWFkKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWQ7XG4gIH1cblxuICB0YWlsKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX3RhaWw7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9oZWFkID0gdGhpcy5fdGFpbCA9IG51bGw7XG4gIH1cblxuICB0b0FycmF5KCk6IFRbXSB7XG4gICAgbGV0IG91dDogVFtdID0gW107XG4gICAgdGhpcy5mb3JFYWNoTm9kZShuID0+IG91dC5wdXNoKG4pKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgbmV4dE5vZGUobm9kZTogVCk6IFQge1xuICAgIHJldHVybiA8dHJ1c3Q+bm9kZS5uZXh0O1xuICB9XG5cbiAgZm9yRWFjaE5vZGUoY2FsbGJhY2s6IChub2RlOiBUKSA9PiB2b2lkKSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLl9oZWFkO1xuXG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKDx0cnVzdD5ub2RlKTtcbiAgICAgIG5vZGUgPSA8dHJ1c3Q+bm9kZS5uZXh0O1xuICAgIH1cbiAgfVxuXG4gIGluc2VydEJlZm9yZShub2RlOiBULCByZWZlcmVuY2U6IE9wdGlvbjxUPiA9IG51bGwpOiBUIHtcbiAgICBpZiAocmVmZXJlbmNlID09PSBudWxsKSByZXR1cm4gdGhpcy5hcHBlbmQobm9kZSk7XG5cbiAgICBpZiAocmVmZXJlbmNlLnByZXYpIHJlZmVyZW5jZS5wcmV2Lm5leHQgPSBub2RlO1xuICAgIGVsc2UgdGhpcy5faGVhZCA9IG5vZGU7XG5cbiAgICBub2RlLnByZXYgPSByZWZlcmVuY2UucHJldjtcbiAgICBub2RlLm5leHQgPSByZWZlcmVuY2U7XG4gICAgcmVmZXJlbmNlLnByZXYgPSBub2RlO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBhcHBlbmQobm9kZTogVCk6IFQge1xuICAgIGxldCB0YWlsID0gdGhpcy5fdGFpbDtcblxuICAgIGlmICh0YWlsKSB7XG4gICAgICB0YWlsLm5leHQgPSBub2RlO1xuICAgICAgbm9kZS5wcmV2ID0gdGFpbDtcbiAgICAgIG5vZGUubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hlYWQgPSBub2RlO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fdGFpbCA9IG5vZGUpO1xuICB9XG5cbiAgcmVtb3ZlKG5vZGU6IFQpOiBUIHtcbiAgICBpZiAobm9kZS5wcmV2KSBub2RlLnByZXYubmV4dCA9IG5vZGUubmV4dDtcbiAgICBlbHNlIHRoaXMuX2hlYWQgPSA8dHJ1c3Q+bm9kZS5uZXh0O1xuXG4gICAgaWYgKG5vZGUubmV4dCkgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG4gICAgZWxzZSB0aGlzLl90YWlsID0gPHRydXN0Pm5vZGUucHJldjtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2xpY2U8VCBleHRlbmRzIExpbmtlZExpc3ROb2RlPiB7XG4gIGhlYWQoKTogT3B0aW9uPFQ+O1xuICB0YWlsKCk6IE9wdGlvbjxUPjtcbiAgbmV4dE5vZGUobm9kZTogVCk6IE9wdGlvbjxUPjtcbiAgZm9yRWFjaE5vZGUoY2FsbGJhY2s6IChub2RlOiBUKSA9PiB2b2lkKTogdm9pZDtcbiAgdG9BcnJheSgpOiBUW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvbmVhYmxlTGlzdE5vZGUgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZSB7XG4gIGNsb25lKCk6IHRoaXM7XG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0U2xpY2U8VCBleHRlbmRzIExpbmtlZExpc3ROb2RlPiBpbXBsZW1lbnRzIFNsaWNlPFQ+IHtcbiAgcHJpdmF0ZSBfaGVhZDogT3B0aW9uPFQ+O1xuICBwcml2YXRlIF90YWlsOiBPcHRpb248VD47XG5cbiAgY29uc3RydWN0b3IoaGVhZDogT3B0aW9uPFQ+LCB0YWlsOiBPcHRpb248VD4pIHtcbiAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICB0aGlzLl90YWlsID0gdGFpbDtcbiAgfVxuXG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCkge1xuICAgIGxldCBub2RlID0gdGhpcy5faGVhZDtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIG5vZGUgPSB0aGlzLm5leHROb2RlKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGhlYWQoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5faGVhZDtcbiAgfVxuXG4gIHRhaWwoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIHRvQXJyYXkoKTogVFtdIHtcbiAgICBsZXQgb3V0OiBUW10gPSBbXTtcbiAgICB0aGlzLmZvckVhY2hOb2RlKG4gPT4gb3V0LnB1c2gobikpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBuZXh0Tm9kZShub2RlOiBUKTogT3B0aW9uPFQ+IHtcbiAgICBpZiAobm9kZSA9PT0gdGhpcy5fdGFpbCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG5vZGUubmV4dCBhcyBUO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9TTElDRSA9IG5ldyBMaXN0U2xpY2UobnVsbCwgbnVsbCk7XG4iXX0=