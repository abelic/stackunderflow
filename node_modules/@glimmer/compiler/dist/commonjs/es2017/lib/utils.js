'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.processOpcodes = processOpcodes;
exports.getAttrNamespace = getAttrNamespace;
function processOpcodes(compiler, opcodes) {
    for (let i = 0, l = opcodes.length; i < l; i++) {
        let method = opcodes[i][0];
        let params = opcodes[i][1];
        if (params) {
            compiler[method].apply(compiler, params);
        } else {
            compiler[method].call(compiler);
        }
    }
}
// There is a small whitelist of namespaced attributes specially
// enumerated in
// https://www.w3.org/TR/html/syntax.html#attributes-0
//
// > When a foreign element has one of the namespaced attributes given by
// > the local name and namespace of the first and second cells of a row
// > from the following table, it must be written using the name given by
// > the third cell from the same row.
//
// In all other cases, colons are interpreted as a regular character
// with no special meaning:
//
// > No other namespaced attribute can be expressed in the HTML syntax.
const XLINK = 'http://www.w3.org/1999/xlink';
const XML = 'http://www.w3.org/XML/1998/namespace';
const XMLNS = 'http://www.w3.org/2000/xmlns/';
const WHITELIST = {
    'xlink:actuate': XLINK,
    'xlink:arcrole': XLINK,
    'xlink:href': XLINK,
    'xlink:role': XLINK,
    'xlink:show': XLINK,
    'xlink:title': XLINK,
    'xlink:type': XLINK,
    'xml:base': XML,
    'xml:lang': XML,
    'xml:space': XML,
    'xmlns': XMLNS,
    'xmlns:xlink': XMLNS
};
function getAttrNamespace(attrName) {
    return WHITELIST[attrName] || null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9jb21waWxlci9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt3QkFBK0IsQUFBYSxVQUFFLEFBQVksU0FDeEQsQUFBRyxBQUFDO1NBQUMsSUFBSSxBQUFDLElBQUMsQUFBQyxHQUFFLEFBQUMsSUFBQyxBQUFPLFFBQUMsQUFBTSxRQUFFLEFBQUMsSUFBQyxBQUFDLEdBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQyxBQUN6QztZQUFJLEFBQU0sU0FBRyxBQUFPLFFBQUMsQUFBQyxBQUFDLEdBQUMsQUFBQyxBQUFDLEFBQUMsQUFDM0I7WUFBSSxBQUFNLFNBQUcsQUFBTyxRQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUMsQUFBQyxBQUFDLEFBQzNCLEFBQUUsQUFBQztZQUFDLEFBQU0sQUFBQyxRQUFDLEFBQUMsQUFDWCxBQUFRO3FCQUFDLEFBQU0sQUFBQyxRQUFDLEFBQUssTUFBQyxBQUFRLFVBQUUsQUFBTSxBQUFDLEFBQUMsQUFDM0MsQUFBQyxBQUFDLEFBQUk7ZUFBQyxBQUFDLEFBQ04sQUFBUTtxQkFBQyxBQUFNLEFBQUMsUUFBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLEFBQUMsQUFDbEMsQUFBQyxBQUNIO0FBQUMsQUFDSDtBQUFDOztBQUVELEFBQWdFO0FBQ2hFLEFBQWdCO0FBQ2hCLEFBQXNEO0FBQ3RELEFBQUU7QUFDRixBQUF5RTtBQUN6RSxBQUF3RTtBQUN4RSxBQUF5RTtBQUN6RSxBQUFzQztBQUN0QyxBQUFFO0FBQ0YsQUFBb0U7QUFDcEUsQUFBMkI7QUFDM0IsQUFBRTtBQUNGLEFBQXVFO0FBRXZFLE1BQU0sQUFBSyxRQUFHLEFBQThCLEFBQUM7QUFDN0MsTUFBTSxBQUFHLE1BQUcsQUFBc0MsQUFBQztBQUNuRCxNQUFNLEFBQUssUUFBRyxBQUErQixBQUFDO0FBRTlDLE1BQU0sQUFBUztxQkFDSSxBQUFLLEFBQ3RCLEFBQWU7cUJBQUUsQUFBSyxBQUN0QixBQUFZO2tCQUFFLEFBQUssQUFDbkIsQUFBWTtrQkFBRSxBQUFLLEFBQ25CLEFBQVk7a0JBQUUsQUFBSyxBQUNuQixBQUFhO21CQUFFLEFBQUssQUFDcEIsQUFBWTtrQkFBRSxBQUFLLEFBQ25CLEFBQVU7Z0JBQUUsQUFBRyxBQUNmLEFBQVU7Z0JBQUUsQUFBRyxBQUNmLEFBQVc7aUJBQUUsQUFBRyxBQUNoQixBQUFPO2FBQUUsQUFBSyxBQUNkLEFBQWE7bUJBWkcsQUFZRCxBQUFLLEFBQ3JCLEFBQUMsQUFFRixBQUFNO0FBZEosQUFBZTswQkFjZ0IsQUFBZ0IsVUFDL0MsQUFBTTtXQUFDLEFBQVMsVUFBQyxBQUFRLEFBQUMsYUFBSSxBQUFJLEFBQUMsQUFDckMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzT3Bjb2Rlcyhjb21waWxlcjogYW55LCBvcGNvZGVzOiBhbnkpIHtcbiAgZm9yIChsZXQgaT0wLCBsPW9wY29kZXMubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgIGxldCBtZXRob2QgPSBvcGNvZGVzW2ldWzBdO1xuICAgIGxldCBwYXJhbXMgPSBvcGNvZGVzW2ldWzFdO1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIGNvbXBpbGVyW21ldGhvZF0uYXBwbHkoY29tcGlsZXIsIHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBpbGVyW21ldGhvZF0uY2FsbChjb21waWxlcik7XG4gICAgfVxuICB9XG59XG5cbi8vIFRoZXJlIGlzIGEgc21hbGwgd2hpdGVsaXN0IG9mIG5hbWVzcGFjZWQgYXR0cmlidXRlcyBzcGVjaWFsbHlcbi8vIGVudW1lcmF0ZWQgaW5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMFxuLy9cbi8vID4gV2hlbiBhIGZvcmVpZ24gZWxlbWVudCBoYXMgb25lIG9mIHRoZSBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMgZ2l2ZW4gYnlcbi8vID4gdGhlIGxvY2FsIG5hbWUgYW5kIG5hbWVzcGFjZSBvZiB0aGUgZmlyc3QgYW5kIHNlY29uZCBjZWxscyBvZiBhIHJvd1xuLy8gPiBmcm9tIHRoZSBmb2xsb3dpbmcgdGFibGUsIGl0IG11c3QgYmUgd3JpdHRlbiB1c2luZyB0aGUgbmFtZSBnaXZlbiBieVxuLy8gPiB0aGUgdGhpcmQgY2VsbCBmcm9tIHRoZSBzYW1lIHJvdy5cbi8vXG4vLyBJbiBhbGwgb3RoZXIgY2FzZXMsIGNvbG9ucyBhcmUgaW50ZXJwcmV0ZWQgYXMgYSByZWd1bGFyIGNoYXJhY3RlclxuLy8gd2l0aCBubyBzcGVjaWFsIG1lYW5pbmc6XG4vL1xuLy8gPiBObyBvdGhlciBuYW1lc3BhY2VkIGF0dHJpYnV0ZSBjYW4gYmUgZXhwcmVzc2VkIGluIHRoZSBIVE1MIHN5bnRheC5cblxuY29uc3QgWExJTksgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5jb25zdCBYTUwgPSAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJztcbmNvbnN0IFhNTE5TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJztcblxuY29uc3QgV0hJVEVMSVNUID0ge1xuICAneGxpbms6YWN0dWF0ZSc6IFhMSU5LLFxuICAneGxpbms6YXJjcm9sZSc6IFhMSU5LLFxuICAneGxpbms6aHJlZic6IFhMSU5LLFxuICAneGxpbms6cm9sZSc6IFhMSU5LLFxuICAneGxpbms6c2hvdyc6IFhMSU5LLFxuICAneGxpbms6dGl0bGUnOiBYTElOSyxcbiAgJ3hsaW5rOnR5cGUnOiBYTElOSyxcbiAgJ3htbDpiYXNlJzogWE1MLFxuICAneG1sOmxhbmcnOiBYTUwsXG4gICd4bWw6c3BhY2UnOiBYTUwsXG4gICd4bWxucyc6IFhNTE5TLFxuICAneG1sbnM6eGxpbmsnOiBYTUxOU1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEF0dHJOYW1lc3BhY2UoYXR0ck5hbWU6IHN0cmluZykge1xuICByZXR1cm4gV0hJVEVMSVNUW2F0dHJOYW1lXSB8fCBudWxsO1xufVxuIl19