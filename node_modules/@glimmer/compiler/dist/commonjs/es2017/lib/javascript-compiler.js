"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Template = exports.ComponentBlock = exports.TemplateBlock = exports.InlineBlock = exports.Block = undefined;

var _util = require("@glimmer/util");

var _wireFormat = require("@glimmer/wire-format");

class Block {
    constructor() {
        this.statements = [];
    }
    push(statement) {
        this.statements.push(statement);
    }
}
exports.Block = Block;
class InlineBlock extends Block {
    constructor(table) {
        super();
        this.table = table;
    }
    toJSON() {
        return {
            statements: this.statements,
            parameters: this.table.slots
        };
    }
}
exports.InlineBlock = InlineBlock;
class TemplateBlock extends Block {
    constructor(symbolTable) {
        super();
        this.symbolTable = symbolTable;
        this.type = "template";
        this.yields = new _util.DictSet();
        this.named = new _util.DictSet();
        this.blocks = [];
        this.hasEval = false;
    }
    push(statement) {
        this.statements.push(statement);
    }
    toJSON() {
        return {
            symbols: this.symbolTable.symbols,
            statements: this.statements,
            hasEval: this.hasEval
        };
    }
}
exports.TemplateBlock = TemplateBlock;
class ComponentBlock extends Block {
    constructor(table) {
        super();
        this.table = table;
        this.attributes = [];
        this.arguments = [];
        this.inParams = true;
        this.positionals = [];
    }
    push(statement) {
        if (this.inParams) {
            if (_wireFormat.Statements.isModifier(statement)) {
                throw new Error('Compile Error: Element modifiers are not allowed in components');
            } else if (_wireFormat.Statements.isFlushElement(statement)) {
                this.inParams = false;
            } else if (_wireFormat.Statements.isArgument(statement)) {
                this.arguments.push(statement);
            } else if (_wireFormat.Statements.isAttribute(statement)) {
                this.attributes.push(statement);
            } else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        } else {
            this.statements.push(statement);
        }
    }
    toJSON() {
        let args = this.arguments;
        let keys = args.map(arg => arg[1]);
        let values = args.map(arg => arg[2]);
        return [this.attributes, [keys, values], {
            statements: this.statements,
            parameters: this.table.slots
        }];
    }
}
exports.ComponentBlock = ComponentBlock;
class Template {
    constructor(symbols, meta) {
        this.meta = meta;
        this.block = new TemplateBlock(symbols);
    }
    toJSON() {
        return {
            block: this.block.toJSON(),
            meta: this.meta
        };
    }
}
exports.Template = Template;
class JavaScriptCompiler {
    constructor(opcodes, symbols, meta) {
        this.blocks = new _util.Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(symbols, meta);
    }
    static process(opcodes, symbols, meta) {
        let compiler = new JavaScriptCompiler(opcodes, symbols, meta);
        return compiler.process();
    }
    get currentBlock() {
        return this.blocks.current;
    }
    process() {
        this.opcodes.forEach(([opcode, ...args]) => {
            if (!this[opcode]) {
                throw new Error(`unimplemented ${opcode} on JavaScriptCompiler`);
            }
            this[opcode](...args);
        });
        return this.template;
    }
    /// Nesting
    startBlock([program]) {
        let block = new InlineBlock(program['symbols']);
        this.blocks.push(block);
    }
    endBlock() {
        let { template, blocks } = this;
        let block = blocks.pop();
        template.block.blocks.push(block.toJSON());
    }
    startProgram() {
        this.blocks.push(this.template.block);
    }
    endProgram() {}
    /// Statements
    text(content) {
        this.push([_wireFormat.Ops.Text, content]);
    }
    append(trusted) {
        this.push([_wireFormat.Ops.Append, this.popValue(), trusted]);
    }
    comment(value) {
        this.push([_wireFormat.Ops.Comment, value]);
    }
    modifier(name) {
        let params = this.popValue();
        let hash = this.popValue();
        this.push([_wireFormat.Ops.Modifier, name, params, hash]);
    }
    block(name, template, inverse) {
        let params = this.popValue();
        let hash = this.popValue();
        let blocks = this.template.block.blocks;
        (0, _util.assert)(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler');
        (0, _util.assert)(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler');
        this.push([_wireFormat.Ops.Block, name, params, hash, blocks[template], blocks[inverse]]);
    }
    openSplattedElement(element) {
        let tag = element.tag;
        if (isComponent(tag)) {
            throw new Error(`Compile Error: ...attributes can only be used in an element`);
        } else if (element.blockParams.length > 0) {
            throw new Error(`Compile Error: <${element.tag}> is not a component and doesn't support block parameters`);
        } else {
            this.push([_wireFormat.Ops.OpenSplattedElement, tag]);
        }
    }
    openElement(element) {
        let tag = element.tag;
        if (isComponent(tag)) {
            this.startComponent(element);
        } else if (element.blockParams.length > 0) {
            throw new Error(`Compile Error: <${element.tag}> is not a component and doesn't support block parameters`);
        } else {
            this.push([_wireFormat.Ops.OpenElement, tag]);
        }
    }
    flushElement() {
        this.push([_wireFormat.Ops.FlushElement]);
    }
    closeElement(element) {
        let tag = element.tag;
        if (isComponent(tag)) {
            let [attrs, args, block] = this.endComponent();
            this.push([_wireFormat.Ops.Component, tag, attrs, args, block]);
        } else {
            this.push([_wireFormat.Ops.CloseElement]);
        }
    }
    staticAttr(name, namespace) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.StaticAttr, name, value, namespace]);
    }
    dynamicAttr(name, namespace) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.DynamicAttr, name, value, namespace]);
    }
    trustingAttr(name, namespace) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.TrustingAttr, name, value, namespace]);
    }
    staticArg(name) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.StaticArg, name, value]);
    }
    dynamicArg(name) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.DynamicArg, name, value]);
    }
    yield(to) {
        let params = this.popValue();
        this.push([_wireFormat.Ops.Yield, to, params]);
    }
    attrSplat(to) {
        this.push([_wireFormat.Ops.AttrSplat, to]);
    }
    debugger(evalInfo) {
        this.push([_wireFormat.Ops.Debugger, evalInfo]);
        this.template.block.hasEval = true;
    }
    hasBlock(name) {
        this.pushValue([_wireFormat.Ops.HasBlock, name]);
    }
    hasBlockParams(name) {
        this.pushValue([_wireFormat.Ops.HasBlockParams, name]);
    }
    partial(evalInfo) {
        let params = this.popValue();
        this.push([_wireFormat.Ops.Partial, params[0], evalInfo]);
        this.template.block.hasEval = true;
    }
    /// Expressions
    literal(value) {
        if (value === undefined) {
            this.pushValue([_wireFormat.Ops.Undefined]);
        } else {
            this.pushValue(value);
        }
    }
    unknown(name) {
        this.pushValue([_wireFormat.Ops.Unknown, name]);
    }
    get(head, path) {
        this.pushValue([_wireFormat.Ops.Get, head, path]);
    }
    maybeLocal(path) {
        this.pushValue([_wireFormat.Ops.MaybeLocal, path]);
    }
    concat() {
        this.pushValue([_wireFormat.Ops.Concat, this.popValue()]);
    }
    helper(name) {
        let params = this.popValue();
        let hash = this.popValue();
        this.pushValue([_wireFormat.Ops.Helper, name, params, hash]);
    }
    /// Stack Management Opcodes
    startComponent(element) {
        let component = new ComponentBlock(element['symbols']);
        this.blocks.push(component);
    }
    endComponent() {
        let component = this.blocks.pop();
        (0, _util.assert)(component instanceof ComponentBlock, "Compiler bug: endComponent() should end a component");
        return component.toJSON();
    }
    prepareArray(size) {
        let values = [];
        for (let i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    }
    prepareObject(size) {
        (0, _util.assert)(this.values.length >= size, `Expected ${size} values on the stack, found ${this.values.length}`);
        let keys = new Array(size);
        let values = new Array(size);
        for (let i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    }
    /// Utilities
    push(args) {
        while (args[args.length - 1] === null) {
            args.pop();
        }
        this.currentBlock.push(args);
    }
    pushValue(val) {
        this.values.push(val);
    }
    popValue() {
        (0, _util.assert)(this.values.length, "No expression found on stack");
        return this.values.pop();
    }
}
exports.default = JavaScriptCompiler;
function isComponent(tag) {
    let open = tag.charAt(0);
    return open === open.toUpperCase();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YXNjcmlwdC1jb21waWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2NvbXBpbGVyL2xpYi9qYXZhc2NyaXB0LWNvbXBpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxBQUFPLEFBQUUsQUFBTSxBQUFFLEFBQU0sQUFBZSxBQUFDLEFBQ3ZDLEFBQU8sQUFBRSxBQUFLLEFBQUUsQUFBTyxBQUFVLEFBQU0sQUFBRSxBQUFNLEFBQWUsQUFBQzs7QUFJL0QsQUFBTyxBQU1MLEFBQVUsQUFHVixBQUFHLEFBQ0osQUFBTSxBQUFzQixBQUFDLEFBUTlCLEFBQU07OztrQkFDRzthQUFVLGFBQWdCLEFBQUUsQUFBQyxBQU90QyxBQUFDO0FBSEMsQUFBSTtTQUFDLEFBQW9CLFdBQ3ZCLEFBQUk7YUFBQyxBQUFVLFdBQUMsQUFBSSxLQUFDLEFBQVMsQUFBQyxBQUFDLEFBQ2xDLEFBQUMsQUFDRjtBQUVELEFBQU07QUFWTjs7TUFVeUIsb0JBQVEsQUFBSztnQkFDakIsQUFBdUIsT0FDeEMsQUFBSyxBQUFFLEFBQUM7QUFEUzthQUFLLFFBQUwsQUFBSyxBQUFrQixBQUUxQyxBQUFDO0FBRUQsQUFBTTthQUNKLEFBQU07O3dCQUNRLEFBQUksS0FBQyxBQUFVLEFBQzNCLEFBQVU7d0JBQUUsQUFBSSxLQUFDLEFBQUssTUFGakIsQUFFa0IsQUFBSyxBQUM3QixBQUFDLEFBQ0osQUFBQyxBQUNGO0FBSkssQUFBVTtBQU1oQixBQUFNO0FBWko7O01BWXlCLHNCQUFRLEFBQUs7Z0JBT2xCLEFBQStCLGFBQ2pELEFBQUssQUFBRSxBQUFDO0FBRFU7YUFBVyxjQU54QixBQU1hLEFBQVcsQUFBb0I7YUFOeEMsT0FBRyxBQUFVLEFBQUMsQUFDbEI7YUFBTSxTQUFHLEFBQUksQUFBTyxBQUFVLEFBQUMsQUFDL0I7YUFBSyxRQUFHLEFBQUksQUFBTyxBQUFVLEFBQUMsQUFDOUI7YUFBTSxT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LEFBQVcsS0FDOUI7UUFBSSxBQUFJLE9BQUcsQUFBRyxJQUFDLEFBQU0sT0FBQyxBQUFDLEFBQUMsQUFBQyxBQUV6QixBQUFNO1dBQUMsQUFBSSxTQUFLLEFBQUksS0FBQyxBQUFXLEFBQUUsQUFBQyxBQUNyQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgV2lyZUZvcm1hdCBmcm9tICdAZ2xpbW1lci93aXJlLWZvcm1hdCc7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiQGdsaW1tZXIvdXRpbFwiO1xuaW1wb3J0IHsgU3RhY2ssIERpY3RTZXQsIE9wdGlvbiwgZXhwZWN0IH0gZnJvbSBcIkBnbGltbWVyL3V0aWxcIjtcbmltcG9ydCB7IEFTVCB9IGZyb20gJ0BnbGltbWVyL3N5bnRheCc7XG5pbXBvcnQgeyBCbG9ja1N5bWJvbFRhYmxlLCBQcm9ncmFtU3ltYm9sVGFibGUgfSBmcm9tICcuL3RlbXBsYXRlLXZpc2l0b3InO1xuXG5pbXBvcnQge1xuICBUZW1wbGF0ZU1ldGEsXG4gIFNlcmlhbGl6ZWRUZW1wbGF0ZUJsb2NrLFxuICBTZXJpYWxpemVkVGVtcGxhdGUsXG4gIENvcmUsXG4gIFN0YXRlbWVudCxcbiAgU3RhdGVtZW50cyxcbiAgRXhwcmVzc2lvbixcbiAgRXhwcmVzc2lvbnMsXG4gIE9wc1xufSBmcm9tICdAZ2xpbW1lci93aXJlLWZvcm1hdCc7XG5cbmV4cG9ydCB0eXBlIHN0ciA9IHN0cmluZztcbmV4cG9ydCB0eXBlIFBhcmFtcyA9IENvcmUuUGFyYW1zO1xuZXhwb3J0IHR5cGUgSGFzaCA9IENvcmUuSGFzaDtcbmV4cG9ydCB0eXBlIFBhdGggPSBDb3JlLlBhdGg7XG5leHBvcnQgdHlwZSBTdGFja1ZhbHVlID0gRXhwcmVzc2lvbiB8IFBhcmFtcyB8IEhhc2ggfCBzdHI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCbG9jayB7XG4gIHB1YmxpYyBzdGF0ZW1lbnRzOiBTdGF0ZW1lbnRbXSA9IFtdO1xuXG4gIGFic3RyYWN0IHRvSlNPTigpOiBPYmplY3Q7XG5cbiAgcHVzaChzdGF0ZW1lbnQ6IFN0YXRlbWVudCkge1xuICAgIHRoaXMuc3RhdGVtZW50cy5wdXNoKHN0YXRlbWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElubGluZUJsb2NrIGV4dGVuZHMgQmxvY2sge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGFibGU6IEJsb2NrU3ltYm9sVGFibGUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgdG9KU09OKCk6IFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGVtZW50czogdGhpcy5zdGF0ZW1lbnRzLFxuICAgICAgcGFyYW1ldGVyczogdGhpcy50YWJsZS5zbG90c1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlQmxvY2sgZXh0ZW5kcyBCbG9jayB7XG4gIHB1YmxpYyB0eXBlID0gXCJ0ZW1wbGF0ZVwiO1xuICBwdWJsaWMgeWllbGRzID0gbmV3IERpY3RTZXQ8c3RyaW5nPigpO1xuICBwdWJsaWMgbmFtZWQgPSBuZXcgRGljdFNldDxzdHJpbmc+KCk7XG4gIHB1YmxpYyBibG9ja3M6IFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrW10gPSBbXTtcbiAgcHVibGljIGhhc0V2YWwgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN5bWJvbFRhYmxlOiBQcm9ncmFtU3ltYm9sVGFibGUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVzaChzdGF0ZW1lbnQ6IFN0YXRlbWVudCkge1xuICAgIHRoaXMuc3RhdGVtZW50cy5wdXNoKHN0YXRlbWVudCk7XG4gIH1cblxuICB0b0pTT04oKTogU2VyaWFsaXplZFRlbXBsYXRlQmxvY2sge1xuICAgIHJldHVybiB7XG4gICAgICBzeW1ib2xzOiB0aGlzLnN5bWJvbFRhYmxlLnN5bWJvbHMsXG4gICAgICBzdGF0ZW1lbnRzOiB0aGlzLnN0YXRlbWVudHMsXG4gICAgICBoYXNFdmFsOiB0aGlzLmhhc0V2YWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRCbG9jayBleHRlbmRzIEJsb2NrIHtcbiAgcHVibGljIGF0dHJpYnV0ZXM6IFN0YXRlbWVudHMuQXR0cmlidXRlW10gPSBbXTtcbiAgcHVibGljIGFyZ3VtZW50czogU3RhdGVtZW50cy5Bcmd1bWVudFtdID0gW107XG4gIHByaXZhdGUgaW5QYXJhbXMgPSB0cnVlO1xuICBwdWJsaWMgcG9zaXRpb25hbHM6IG51bWJlcltdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YWJsZTogQmxvY2tTeW1ib2xUYWJsZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdXNoKHN0YXRlbWVudDogU3RhdGVtZW50KSB7XG4gICAgaWYgKHRoaXMuaW5QYXJhbXMpIHtcbiAgICAgIGlmIChTdGF0ZW1lbnRzLmlzTW9kaWZpZXIoc3RhdGVtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBpbGUgRXJyb3I6IEVsZW1lbnQgbW9kaWZpZXJzIGFyZSBub3QgYWxsb3dlZCBpbiBjb21wb25lbnRzJyk7XG4gICAgICB9IGVsc2UgaWYgKFN0YXRlbWVudHMuaXNGbHVzaEVsZW1lbnQoc3RhdGVtZW50KSkge1xuICAgICAgICB0aGlzLmluUGFyYW1zID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKFN0YXRlbWVudHMuaXNBcmd1bWVudChzdGF0ZW1lbnQpKSB7XG4gICAgICAgIHRoaXMuYXJndW1lbnRzLnB1c2goc3RhdGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoU3RhdGVtZW50cy5pc0F0dHJpYnV0ZShzdGF0ZW1lbnQpKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcy5wdXNoKHN0YXRlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBpbGUgRXJyb3I6IG9ubHkgcGFyYW1ldGVycyBhbGxvd2VkIGJlZm9yZSBmbHVzaC1lbGVtZW50Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdGVtZW50cy5wdXNoKHN0YXRlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgdG9KU09OKCk6IFtXaXJlRm9ybWF0LlN0YXRlbWVudHMuQXR0cmlidXRlW10sIFdpcmVGb3JtYXQuQ29yZS5IYXNoLCBPcHRpb248V2lyZUZvcm1hdC5TZXJpYWxpemVkSW5saW5lQmxvY2s+XSB7XG4gICAgbGV0IGFyZ3MgPSB0aGlzLmFyZ3VtZW50cztcbiAgICBsZXQga2V5cyA9IGFyZ3MubWFwKGFyZyA9PiBhcmdbMV0pO1xuICAgIGxldCB2YWx1ZXMgPSBhcmdzLm1hcChhcmcgPT4gYXJnWzJdKTtcblxuICAgIHJldHVybiBbXG4gICAgICB0aGlzLmF0dHJpYnV0ZXMsXG4gICAgICBba2V5cywgdmFsdWVzXSxcbiAgICAgIHtcbiAgICAgICAgc3RhdGVtZW50czogdGhpcy5zdGF0ZW1lbnRzLFxuICAgICAgICBwYXJhbWV0ZXJzOiB0aGlzLnRhYmxlLnNsb3RzXG4gICAgICB9XG4gICAgXTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGU8VCBleHRlbmRzIFRlbXBsYXRlTWV0YT4ge1xuICBwdWJsaWMgYmxvY2s6IFRlbXBsYXRlQmxvY2s7XG5cbiAgY29uc3RydWN0b3Ioc3ltYm9sczogUHJvZ3JhbVN5bWJvbFRhYmxlLCBwdWJsaWMgbWV0YTogVCkge1xuICAgIHRoaXMuYmxvY2sgPSBuZXcgVGVtcGxhdGVCbG9jayhzeW1ib2xzKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBTZXJpYWxpemVkVGVtcGxhdGU8VD4ge1xuICAgIHJldHVybiB7XG4gICAgICBibG9jazogdGhpcy5ibG9jay50b0pTT04oKSxcbiAgICAgIG1ldGE6IHRoaXMubWV0YVxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSmF2YVNjcmlwdENvbXBpbGVyPFQgZXh0ZW5kcyBUZW1wbGF0ZU1ldGE+IHtcbiAgc3RhdGljIHByb2Nlc3M8VCBleHRlbmRzIFRlbXBsYXRlTWV0YT4ob3Bjb2RlczogYW55W10sIHN5bWJvbHM6IFByb2dyYW1TeW1ib2xUYWJsZSwgbWV0YTogVCk6IFRlbXBsYXRlPFQ+IHtcbiAgICBsZXQgY29tcGlsZXIgPSBuZXcgSmF2YVNjcmlwdENvbXBpbGVyPFQ+KG9wY29kZXMsIHN5bWJvbHMsIG1ldGEpO1xuICAgIHJldHVybiBjb21waWxlci5wcm9jZXNzKCk7XG4gIH1cblxuICBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZTxUPjtcbiAgcHJpdmF0ZSBibG9ja3MgPSBuZXcgU3RhY2s8QmxvY2s+KCk7XG4gIHByaXZhdGUgb3Bjb2RlczogYW55W107XG4gIHByaXZhdGUgdmFsdWVzOiBTdGFja1ZhbHVlW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihvcGNvZGVzOiBhbnlbXSwgc3ltYm9sczogUHJvZ3JhbVN5bWJvbFRhYmxlLCBtZXRhOiBUKSB7XG4gICAgdGhpcy5vcGNvZGVzID0gb3Bjb2RlcztcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHN5bWJvbHMsIG1ldGEpO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRCbG9jaygpOiBCbG9jayB7XG4gICAgcmV0dXJuIGV4cGVjdCh0aGlzLmJsb2Nrcy5jdXJyZW50LCAnRXhwZWN0ZWQgYSBibG9jayBvbiB0aGUgc3RhY2snKTtcbiAgfVxuXG4gIHByb2Nlc3MoKTogVGVtcGxhdGU8VD4ge1xuICAgIHRoaXMub3Bjb2Rlcy5mb3JFYWNoKChbb3Bjb2RlLCAuLi5hcmdzXSkgPT4ge1xuICAgICAgaWYgKCF0aGlzW29wY29kZV0pIHsgdGhyb3cgbmV3IEVycm9yKGB1bmltcGxlbWVudGVkICR7b3Bjb2RlfSBvbiBKYXZhU2NyaXB0Q29tcGlsZXJgKTsgfVxuICAgICAgdGhpc1tvcGNvZGVdKC4uLmFyZ3MpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGU7XG4gIH1cblxuICAvLy8gTmVzdGluZ1xuXG4gIHN0YXJ0QmxvY2soW3Byb2dyYW1dOiBbQVNULlByb2dyYW1dKSB7XG4gICAgbGV0IGJsb2NrOiBCbG9jayA9IG5ldyBJbmxpbmVCbG9jayhwcm9ncmFtWydzeW1ib2xzJ10pO1xuICAgIHRoaXMuYmxvY2tzLnB1c2goYmxvY2spO1xuICB9XG5cbiAgZW5kQmxvY2soKSB7XG4gICAgbGV0IHsgdGVtcGxhdGUsIGJsb2NrcyB9ID0gdGhpcztcbiAgICBsZXQgYmxvY2sgPSBibG9ja3MucG9wKCkgYXMgSW5saW5lQmxvY2s7XG4gICAgdGVtcGxhdGUuYmxvY2suYmxvY2tzLnB1c2goYmxvY2sudG9KU09OKCkpO1xuICB9XG5cbiAgc3RhcnRQcm9ncmFtKCkge1xuICAgIHRoaXMuYmxvY2tzLnB1c2godGhpcy50ZW1wbGF0ZS5ibG9jayk7XG4gIH1cblxuICBlbmRQcm9ncmFtKCkge1xuXG4gIH1cblxuICAvLy8gU3RhdGVtZW50c1xuXG4gIHRleHQoY29udGVudDogc3RyaW5nKSB7XG4gICAgdGhpcy5wdXNoKFtPcHMuVGV4dCwgY29udGVudF0pO1xuICB9XG5cbiAgYXBwZW5kKHRydXN0ZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnB1c2goW09wcy5BcHBlbmQsIHRoaXMucG9wVmFsdWU8RXhwcmVzc2lvbj4oKSwgdHJ1c3RlZF0pO1xuICB9XG5cbiAgY29tbWVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5wdXNoKFtPcHMuQ29tbWVudCwgdmFsdWVdKTtcbiAgfVxuXG4gIG1vZGlmaWVyKG5hbWU6IHN0cmluZykge1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLnBvcFZhbHVlPFBhcmFtcz4oKTtcbiAgICBsZXQgaGFzaCA9IHRoaXMucG9wVmFsdWU8SGFzaD4oKTtcblxuICAgIHRoaXMucHVzaChbT3BzLk1vZGlmaWVyLCBuYW1lLCBwYXJhbXMsIGhhc2hdKTtcbiAgfVxuXG4gIGJsb2NrKG5hbWU6IHN0cmluZywgdGVtcGxhdGU6IG51bWJlciwgaW52ZXJzZTogbnVtYmVyKSB7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMucG9wVmFsdWU8UGFyYW1zPigpO1xuICAgIGxldCBoYXNoID0gdGhpcy5wb3BWYWx1ZTxIYXNoPigpO1xuXG4gICAgbGV0IGJsb2NrcyA9IHRoaXMudGVtcGxhdGUuYmxvY2suYmxvY2tzO1xuICAgIGFzc2VydCh0eXBlb2YgdGVtcGxhdGUgIT09ICdudW1iZXInIHx8IGJsb2Nrc1t0ZW1wbGF0ZV0gIT09IG51bGwsICdtaXNzaW5nIGJsb2NrIGluIHRoZSBjb21waWxlcicpO1xuICAgIGFzc2VydCh0eXBlb2YgaW52ZXJzZSAhPT0gJ251bWJlcicgfHwgYmxvY2tzW2ludmVyc2VdICE9PSBudWxsLCAnbWlzc2luZyBibG9jayBpbiB0aGUgY29tcGlsZXInKTtcblxuICAgIHRoaXMucHVzaChbT3BzLkJsb2NrLCBuYW1lLCBwYXJhbXMsIGhhc2gsIGJsb2Nrc1t0ZW1wbGF0ZV0sIGJsb2Nrc1tpbnZlcnNlXV0pO1xuICB9XG5cbiAgb3BlblNwbGF0dGVkRWxlbWVudChlbGVtZW50OiBBU1QuRWxlbWVudE5vZGUpIHtcbiAgICBsZXQgdGFnID0gZWxlbWVudC50YWc7XG5cbiAgICBpZiAoaXNDb21wb25lbnQodGFnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21waWxlIEVycm9yOiAuLi5hdHRyaWJ1dGVzIGNhbiBvbmx5IGJlIHVzZWQgaW4gYW4gZWxlbWVudGApO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudC5ibG9ja1BhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBpbGUgRXJyb3I6IDwke2VsZW1lbnQudGFnfT4gaXMgbm90IGEgY29tcG9uZW50IGFuZCBkb2Vzbid0IHN1cHBvcnQgYmxvY2sgcGFyYW1ldGVyc2ApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2goW09wcy5PcGVuU3BsYXR0ZWRFbGVtZW50LCB0YWddKTtcbiAgICB9XG4gIH1cblxuICBvcGVuRWxlbWVudChlbGVtZW50OiBBU1QuRWxlbWVudE5vZGUpIHtcbiAgICBsZXQgdGFnID0gZWxlbWVudC50YWc7XG5cbiAgICBpZiAoaXNDb21wb25lbnQodGFnKSkge1xuICAgICAgdGhpcy5zdGFydENvbXBvbmVudChlbGVtZW50KTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuYmxvY2tQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21waWxlIEVycm9yOiA8JHtlbGVtZW50LnRhZ30+IGlzIG5vdCBhIGNvbXBvbmVudCBhbmQgZG9lc24ndCBzdXBwb3J0IGJsb2NrIHBhcmFtZXRlcnNgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKFtPcHMuT3BlbkVsZW1lbnQsIHRhZ10pO1xuICAgIH1cbiAgfVxuXG4gIGZsdXNoRWxlbWVudCgpIHtcbiAgICB0aGlzLnB1c2goW09wcy5GbHVzaEVsZW1lbnRdKTtcbiAgfVxuXG4gIGNsb3NlRWxlbWVudChlbGVtZW50OiBBU1QuRWxlbWVudE5vZGUpIHtcbiAgICBsZXQgdGFnID0gZWxlbWVudC50YWc7XG5cbiAgICBpZiAoaXNDb21wb25lbnQodGFnKSkge1xuICAgICAgbGV0IFthdHRycywgYXJncywgYmxvY2tdID0gdGhpcy5lbmRDb21wb25lbnQoKTtcbiAgICAgIHRoaXMucHVzaChbT3BzLkNvbXBvbmVudCwgdGFnLCBhdHRycywgYXJncywgYmxvY2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKFtPcHMuQ2xvc2VFbGVtZW50XSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljQXR0cihuYW1lOiBzdHIsIG5hbWVzcGFjZTogc3RyKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5wb3BWYWx1ZTxFeHByZXNzaW9uPigpO1xuICAgIHRoaXMucHVzaChbT3BzLlN0YXRpY0F0dHIsIG5hbWUsIHZhbHVlLCBuYW1lc3BhY2VdKTtcbiAgfVxuXG4gIGR5bmFtaWNBdHRyKG5hbWU6IHN0ciwgbmFtZXNwYWNlOiBzdHIpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnBvcFZhbHVlPEV4cHJlc3Npb24+KCk7XG4gICAgdGhpcy5wdXNoKFtPcHMuRHluYW1pY0F0dHIsIG5hbWUsIHZhbHVlLCBuYW1lc3BhY2VdKTtcbiAgfVxuXG4gIHRydXN0aW5nQXR0cihuYW1lOiBzdHIsIG5hbWVzcGFjZTogc3RyKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5wb3BWYWx1ZTxFeHByZXNzaW9uPigpO1xuICAgIHRoaXMucHVzaChbT3BzLlRydXN0aW5nQXR0ciwgbmFtZSwgdmFsdWUsIG5hbWVzcGFjZV0pO1xuICB9XG5cbiAgc3RhdGljQXJnKG5hbWU6IHN0cikge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMucG9wVmFsdWU8RXhwcmVzc2lvbj4oKTtcbiAgICB0aGlzLnB1c2goW09wcy5TdGF0aWNBcmcsIG5hbWUsIHZhbHVlXSk7XG4gIH1cblxuICBkeW5hbWljQXJnKG5hbWU6IHN0cikge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMucG9wVmFsdWU8RXhwcmVzc2lvbj4oKTtcbiAgICB0aGlzLnB1c2goW09wcy5EeW5hbWljQXJnLCBuYW1lLCB2YWx1ZV0pO1xuICB9XG5cbiAgeWllbGQodG86IG51bWJlcikge1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLnBvcFZhbHVlPFBhcmFtcz4oKTtcbiAgICB0aGlzLnB1c2goW09wcy5ZaWVsZCwgdG8sIHBhcmFtc10pO1xuICB9XG5cbiAgYXR0clNwbGF0KHRvOiBudW1iZXIpIHtcbiAgICB0aGlzLnB1c2goW09wcy5BdHRyU3BsYXQsIHRvXSk7XG4gIH1cblxuICBkZWJ1Z2dlcihldmFsSW5mbzogQ29yZS5FdmFsSW5mbykge1xuICAgIHRoaXMucHVzaChbT3BzLkRlYnVnZ2VyLCBldmFsSW5mb10pO1xuICAgIHRoaXMudGVtcGxhdGUuYmxvY2suaGFzRXZhbCA9IHRydWU7XG4gIH1cblxuICBoYXNCbG9jayhuYW1lOiBudW1iZXIpIHtcbiAgICB0aGlzLnB1c2hWYWx1ZTxFeHByZXNzaW9ucy5IYXNCbG9jaz4oW09wcy5IYXNCbG9jaywgbmFtZV0pO1xuICB9XG5cbiAgaGFzQmxvY2tQYXJhbXMobmFtZTogbnVtYmVyKSB7XG4gICAgdGhpcy5wdXNoVmFsdWU8RXhwcmVzc2lvbnMuSGFzQmxvY2tQYXJhbXM+KFtPcHMuSGFzQmxvY2tQYXJhbXMsIG5hbWVdKTtcbiAgfVxuXG4gIHBhcnRpYWwoZXZhbEluZm86IENvcmUuRXZhbEluZm8pIHtcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5wb3BWYWx1ZTxQYXJhbXM+KCk7XG4gICAgdGhpcy5wdXNoKFtPcHMuUGFydGlhbCwgcGFyYW1zWzBdLCBldmFsSW5mb10pO1xuICAgIHRoaXMudGVtcGxhdGUuYmxvY2suaGFzRXZhbCA9IHRydWU7XG4gIH1cblxuICAvLy8gRXhwcmVzc2lvbnNcblxuICBsaXRlcmFsKHZhbHVlOiBFeHByZXNzaW9ucy5WYWx1ZSB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnB1c2hWYWx1ZTxFeHByZXNzaW9ucy5VbmRlZmluZWQ+KFtPcHMuVW5kZWZpbmVkXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFZhbHVlPEV4cHJlc3Npb25zLlZhbHVlPih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdW5rbm93bihuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLnB1c2hWYWx1ZTxFeHByZXNzaW9ucy5Vbmtub3duPihbT3BzLlVua25vd24sIG5hbWVdKTtcbiAgfVxuXG4gIGdldChoZWFkOiBudW1iZXIsIHBhdGg6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5wdXNoVmFsdWU8RXhwcmVzc2lvbnMuR2V0PihbT3BzLkdldCwgaGVhZCwgcGF0aF0pO1xuICB9XG5cbiAgbWF5YmVMb2NhbChwYXRoOiBzdHJpbmdbXSkge1xuICAgIHRoaXMucHVzaFZhbHVlPEV4cHJlc3Npb25zLk1heWJlTG9jYWw+KFtPcHMuTWF5YmVMb2NhbCwgcGF0aF0pO1xuICB9XG5cbiAgY29uY2F0KCkge1xuICAgIHRoaXMucHVzaFZhbHVlPEV4cHJlc3Npb25zLkNvbmNhdD4oW09wcy5Db25jYXQsIHRoaXMucG9wVmFsdWU8UGFyYW1zPigpXSk7XG4gIH1cblxuICBoZWxwZXIobmFtZTogc3RyaW5nKSB7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMucG9wVmFsdWU8UGFyYW1zPigpO1xuICAgIGxldCBoYXNoID0gdGhpcy5wb3BWYWx1ZTxIYXNoPigpO1xuXG4gICAgdGhpcy5wdXNoVmFsdWU8RXhwcmVzc2lvbnMuSGVscGVyPihbT3BzLkhlbHBlciwgbmFtZSwgcGFyYW1zLCBoYXNoXSk7XG4gIH1cblxuICAvLy8gU3RhY2sgTWFuYWdlbWVudCBPcGNvZGVzXG5cbiAgc3RhcnRDb21wb25lbnQoZWxlbWVudDogQVNULkVsZW1lbnROb2RlKSB7XG4gICAgbGV0IGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnRCbG9jayhlbGVtZW50WydzeW1ib2xzJ10pO1xuICAgIHRoaXMuYmxvY2tzLnB1c2goY29tcG9uZW50KTtcbiAgfVxuXG4gIGVuZENvbXBvbmVudCgpOiBbV2lyZUZvcm1hdC5TdGF0ZW1lbnRzLkF0dHJpYnV0ZVtdLCBXaXJlRm9ybWF0LkNvcmUuSGFzaCwgT3B0aW9uPFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrPl0ge1xuICAgIGxldCBjb21wb25lbnQgPSB0aGlzLmJsb2Nrcy5wb3AoKTtcbiAgICBhc3NlcnQoY29tcG9uZW50IGluc3RhbmNlb2YgQ29tcG9uZW50QmxvY2ssIFwiQ29tcGlsZXIgYnVnOiBlbmRDb21wb25lbnQoKSBzaG91bGQgZW5kIGEgY29tcG9uZW50XCIpO1xuICAgIHJldHVybiAoY29tcG9uZW50IGFzIENvbXBvbmVudEJsb2NrKS50b0pTT04oKTtcbiAgfVxuXG4gIHByZXBhcmVBcnJheShzaXplOiBudW1iZXIpIHtcbiAgICBsZXQgdmFsdWVzOiBFeHByZXNzaW9uW10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICB2YWx1ZXMucHVzaCh0aGlzLnBvcFZhbHVlKCkgYXMgRXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoVmFsdWU8UGFyYW1zPih2YWx1ZXMpO1xuICB9XG5cbiAgcHJlcGFyZU9iamVjdChzaXplOiBudW1iZXIpIHtcbiAgICBhc3NlcnQodGhpcy52YWx1ZXMubGVuZ3RoID49IHNpemUsIGBFeHBlY3RlZCAke3NpemV9IHZhbHVlcyBvbiB0aGUgc3RhY2ssIGZvdW5kICR7dGhpcy52YWx1ZXMubGVuZ3RofWApO1xuXG4gICAgbGV0IGtleXM6IHN0cmluZ1tdID0gbmV3IEFycmF5KHNpemUpO1xuICAgIGxldCB2YWx1ZXM6IEV4cHJlc3Npb25bXSA9IG5ldyBBcnJheShzaXplKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICBrZXlzW2ldID0gdGhpcy5wb3BWYWx1ZTxzdHI+KCk7XG4gICAgICB2YWx1ZXNbaV0gPSB0aGlzLnBvcFZhbHVlPEV4cHJlc3Npb24+KCk7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoVmFsdWU8SGFzaD4oW2tleXMsIHZhbHVlc10pO1xuICB9XG5cbiAgLy8vIFV0aWxpdGllc1xuXG4gIHB1c2goYXJnczogU3RhdGVtZW50KSB7XG4gICAgd2hpbGUgKGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gbnVsbCkge1xuICAgICAgYXJncy5wb3AoKTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRCbG9jay5wdXNoKGFyZ3MpO1xuICB9XG5cbiAgcHVzaFZhbHVlPFMgZXh0ZW5kcyBFeHByZXNzaW9uIHwgUGFyYW1zIHwgSGFzaD4odmFsOiBTKSB7XG4gICAgdGhpcy52YWx1ZXMucHVzaCh2YWwpO1xuICB9XG5cbiAgcG9wVmFsdWU8VCBleHRlbmRzIFN0YWNrVmFsdWU+KCk6IFQge1xuICAgIGFzc2VydCh0aGlzLnZhbHVlcy5sZW5ndGgsIFwiTm8gZXhwcmVzc2lvbiBmb3VuZCBvbiBzdGFja1wiKTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXMucG9wKCkgYXMgVDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0NvbXBvbmVudCh0YWc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBsZXQgb3BlbiA9IHRhZy5jaGFyQXQoMCk7XG5cbiAgcmV0dXJuIG9wZW4gPT09IG9wZW4udG9VcHBlckNhc2UoKTtcbn0iXX0=