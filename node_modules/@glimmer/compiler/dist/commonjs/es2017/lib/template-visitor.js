'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BlockSymbolTable = exports.ProgramSymbolTable = exports.SymbolTable = undefined;

var _util = require('@glimmer/util');

class SymbolTable {
    static top() {
        return new ProgramSymbolTable();
    }
    child(locals) {
        let symbols = locals.map(name => this.allocate(name));
        return new BlockSymbolTable(this, locals, symbols);
    }
}
exports.SymbolTable = SymbolTable;
class ProgramSymbolTable extends SymbolTable {
    constructor() {
        super(...arguments);
        this.symbols = [];
        this.size = 1;
        this.named = (0, _util.dict)();
        this.blocks = (0, _util.dict)();
    }
    has(_name) {
        return false;
    }
    get(_name) {
        throw (0, _util.unreachable)();
    }
    getLocalsMap() {
        return {};
    }
    getEvalInfo() {
        return [];
    }
    allocateNamed(name) {
        let named = this.named[name];
        if (!named) {
            named = this.named[name] = this.allocate(`@${name}`);
        }
        return named;
    }
    allocateBlock(name) {
        let block = this.blocks[name];
        if (!block) {
            block = this.blocks[name] = this.allocate(`&${name}`);
        }
        return block;
    }
    allocate(identifier) {
        this.symbols.push(identifier);
        return this.size++;
    }
}
exports.ProgramSymbolTable = ProgramSymbolTable;
class BlockSymbolTable extends SymbolTable {
    constructor(parent, symbols, slots) {
        super();
        this.parent = parent;
        this.symbols = symbols;
        this.slots = slots;
    }
    has(name) {
        return this.symbols.indexOf(name) !== -1 || this.parent.has(name);
    }
    get(name) {
        let slot = this.symbols.indexOf(name);
        return slot === -1 ? this.parent.get(name) : this.slots[slot];
    }
    getLocalsMap() {
        let dict = this.parent.getLocalsMap();
        this.symbols.forEach(symbol => dict[symbol] = this.get(symbol));
        return dict;
    }
    getEvalInfo() {
        let locals = this.getLocalsMap();
        return Object.keys(locals).map(symbol => locals[symbol]);
    }
    allocateNamed(name) {
        return this.parent.allocateNamed(name);
    }
    allocateBlock(name) {
        return this.parent.allocateBlock(name);
    }
    allocate(identifier) {
        return this.parent.allocate(identifier);
    }
}
exports.BlockSymbolTable = BlockSymbolTable; /**
                                              * Takes in an AST and outputs a list of actions to be consumed
                                              * by a compiler. For example, the template
                                              *
                                              *     foo{{bar}}<div>baz</div>
                                              *
                                              * produces the actions
                                              *
                                              *     [['startProgram', [programNode, 0]],
                                              *      ['text', [textNode, 0, 3]],
                                              *      ['mustache', [mustacheNode, 1, 3]],
                                              *      ['openElement', [elementNode, 2, 3, 0]],
                                              *      ['text', [textNode, 0, 1]],
                                              *      ['closeElement', [elementNode, 2, 3],
                                              *      ['endProgram', [programNode]]]
                                              *
                                              * This visitor walks the AST depth first and backwards. As
                                              * a result the bottom-most child template will appear at the
                                              * top of the actions list whereas the root template will appear
                                              * at the bottom of the list. For example,
                                              *
                                              *     <div>{{#if}}foo{{else}}bar<b></b>{{/if}}</div>
                                              *
                                              * produces the actions
                                              *
                                              *     [['startProgram', [programNode, 0]],
                                              *      ['text', [textNode, 0, 2, 0]],
                                              *      ['openElement', [elementNode, 1, 2, 0]],
                                              *      ['closeElement', [elementNode, 1, 2]],
                                              *      ['endProgram', [programNode]],
                                              *      ['startProgram', [programNode, 0]],
                                              *      ['text', [textNode, 0, 1]],
                                              *      ['endProgram', [programNode]],
                                              *      ['startProgram', [programNode, 2]],
                                              *      ['openElement', [elementNode, 0, 1, 1]],
                                              *      ['block', [blockNode, 0, 1]],
                                              *      ['closeElement', [elementNode, 0, 1]],
                                              *      ['endProgram', [programNode]]]
                                              *
                                              * The state of the traversal is maintained by a stack of frames.
                                              * Whenever a node with children is entered (either a ProgramNode
                                              * or an ElementNode) a frame is pushed onto the stack. The frame
                                              * contains information about the state of the traversal of that
                                              * node. For example,
                                              *
                                              *   - index of the current child node being visited
                                              *   - the number of mustaches contained within its child nodes
                                              *   - the list of actions generated by its child nodes
                                              */

class Frame {
    constructor() {
        this.parentNode = null;
        this.children = null;
        this.childIndex = null;
        this.childCount = null;
        this.childTemplateCount = 0;
        this.mustacheCount = 0;
        this.actions = [];
        this.blankChildTextNodes = null;
        this.symbols = null;
    }
}
class TemplateVisitor {
    constructor() {
        this.frameStack = [];
        this.actions = [];
        this.programDepth = -1;
    }
    visit(node) {
        this[node.type](node);
    }
    // Traversal methods
    Program(program) {
        this.programDepth++;
        let parentFrame = this.getCurrentFrame();
        let programFrame = this.pushFrame();
        if (!parentFrame) {
            program['symbols'] = SymbolTable.top();
        } else {
            program['symbols'] = parentFrame.symbols.child(program.blockParams);
        }
        let startType, endType;
        if (this.programDepth === 0) {
            startType = 'startProgram';
            endType = 'endProgram';
        } else {
            startType = 'startBlock';
            endType = 'endBlock';
        }
        programFrame.parentNode = program;
        programFrame.children = program.body;
        programFrame.childCount = program.body.length;
        programFrame.blankChildTextNodes = [];
        programFrame.actions.push([endType, [program, this.programDepth]]);
        programFrame.symbols = program['symbols'];
        for (let i = program.body.length - 1; i >= 0; i--) {
            programFrame.childIndex = i;
            this.visit(program.body[i]);
        }
        programFrame.actions.push([startType, [program, programFrame.childTemplateCount, programFrame.blankChildTextNodes.reverse()]]);
        this.popFrame();
        this.programDepth--;
        // Push the completed template into the global actions list
        if (parentFrame) {
            parentFrame.childTemplateCount++;
        }
        this.actions.push(...programFrame.actions.reverse());
    }
    ElementNode(element) {
        let parentFrame = this.currentFrame;
        let elementFrame = this.pushFrame();
        elementFrame.parentNode = element;
        elementFrame.children = element.children;
        elementFrame.childCount = element.children.length;
        elementFrame.mustacheCount += element.modifiers.length;
        elementFrame.blankChildTextNodes = [];
        elementFrame.symbols = element['symbols'] = parentFrame.symbols.child(element.blockParams);
        let actionArgs = [element, parentFrame.childIndex, parentFrame.childCount];
        elementFrame.actions.push(['closeElement', actionArgs]);
        for (let i = element.attributes.length - 1; i >= 0; i--) {
            this.visit(element.attributes[i]);
        }
        for (let i = element.children.length - 1; i >= 0; i--) {
            elementFrame.childIndex = i;
            this.visit(element.children[i]);
        }
        let open = ['openElement', [...actionArgs, elementFrame.mustacheCount, elementFrame.blankChildTextNodes.reverse()]];
        elementFrame.actions.push(open);
        this.popFrame();
        // Propagate the element's frame state to the parent frame
        if (elementFrame.mustacheCount > 0) {
            parentFrame.mustacheCount++;
        }
        parentFrame.childTemplateCount += elementFrame.childTemplateCount;
        parentFrame.actions.push(...elementFrame.actions);
    }
    AttrNode(attr) {
        if (attr.value.type !== 'TextNode') {
            this.currentFrame.mustacheCount++;
        }
    }

    TextNode(text) {
        let frame = this.currentFrame;
        if (text.chars === '') {
            frame.blankChildTextNodes.push(domIndexOf(frame.children, text));
        }
        frame.actions.push(['text', [text, frame.childIndex, frame.childCount]]);
    }

    BlockStatement(node) {
        let frame = this.currentFrame;
        frame.mustacheCount++;
        frame.actions.push(['block', [node, frame.childIndex, frame.childCount]]);
        if (node.inverse) {
            this.visit(node.inverse);
        }
        if (node.program) {
            this.visit(node.program);
        }
    }

    PartialStatement(node) {
        let frame = this.currentFrame;
        frame.mustacheCount++;
        frame.actions.push(['mustache', [node, frame.childIndex, frame.childCount]]);
    }

    CommentStatement(text) {
        let frame = this.currentFrame;
        frame.actions.push(['comment', [text, frame.childIndex, frame.childCount]]);
    }

    MustacheCommentStatement() {
        // Intentional empty: Handlebars comments should not affect output.
    }

    MustacheStatement(mustache) {
        let frame = this.currentFrame;
        frame.mustacheCount++;
        frame.actions.push(['mustache', [mustache, frame.childIndex, frame.childCount]]);
    }

    // Frame helpers
    get currentFrame() {
        return this.getCurrentFrame();
    }
    getCurrentFrame() {
        return this.frameStack[this.frameStack.length - 1];
    }
    pushFrame() {
        let frame = new Frame();
        this.frameStack.push(frame);
        return frame;
    }
    popFrame() {
        return this.frameStack.pop();
    }
}
exports.default = TemplateVisitor; // Returns the index of `domNode` in the `nodes` array, skipping
// over any nodes which do not represent DOM nodes.

function domIndexOf(nodes, domNode) {
    let index = -1;
    for (let i = 0; i < nodes.length; i++) {
        let node = nodes[i];
        if (node.type !== 'TextNode' && node.type !== 'ElementNode') {
            continue;
        } else {
            index++;
        }
        if (node === domNode) {
            return index;
        }
    }
    return -1;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtdmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2NvbXBpbGVyL2xpYi90ZW1wbGF0ZS12aXNpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQSxBQUFPLEFBQWdCLEFBQUksQUFBRSxBQUFXLEFBQUUsQUFBTSxBQUFFLEFBQU0sQUFBZSxBQUFDLEFBRXhFLEFBQU07OztXQUNHLEFBQUcsTUFDUixBQUFNO2VBQUMsSUFBSSxBQUFrQixBQUFFLEFBQUMsQUFDbEMsQUFBQztBQVlELEFBQUs7VUFBQyxBQUFnQixRQUNwQjtZQUFJLEFBQU8sVUFBRyxBQUFNLE9BQUMsQUFBRyxJQUFDLEFBQUksUUFBSSxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQUksQUFBQyxBQUFDLEFBQUMsQUFDdEQsQUFBTTtlQUFDLElBQUksQUFBZ0IsaUJBQUMsQUFBSSxNQUFFLEFBQU0sUUFBRSxBQUFPLEFBQUMsQUFBQyxBQUNyRCxBQUFDLEFBQ0Y7QUFFRCxBQUFNO0FBcEJKLEFBQU07O01Bb0J3QiwyQkFBUSxBQUFXOztpQkFDMUM7YUFBTyxVQUFhLEFBQUUsQUFBQyxBQUV0QjthQUFJLE9BQUcsQUFBQyxBQUFDLEFBQ1Q7YUFBSyxRQUFHLEFBQUksQUFBVSxBQUFDLEFBQ3ZCO2FBQU0sU0FBRyxBQUFJLEFBQVUsQUFBQyxBQTBDbEMsQUFBQztBQXhDQyxBQUFHO1FBQUMsQUFBYSxPQUNmLEFBQU07ZUFBQyxBQUFLLEFBQUMsQUFDZixBQUFDO0FBRUQsQUFBRztRQUFDLEFBQWEsT0FDZjtjQUFNLEFBQVcsQUFBRSxBQUFDLEFBQ3RCLEFBQUM7QUFFRCxBQUFZO21CQUNWLEFBQU07ZUFBQyxBQUFFLEFBQUMsQUFDWixBQUFDO0FBRUQsQUFBVztrQkFDVCxBQUFNO2VBQUMsQUFBRSxBQUFDLEFBQ1osQUFBQztBQUVELEFBQWE7a0JBQUMsQUFBWSxNQUN4QjtZQUFJLEFBQUss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LEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBU1QgfSBmcm9tICdAZ2xpbW1lci9zeW50YXgnO1xuaW1wb3J0IHsgQ29yZSB9IGZyb20gJ0BnbGltbWVyL3dpcmUtZm9ybWF0JztcbmltcG9ydCB7IERpY3QsIE9wdGlvbiwgZGljdCwgdW5yZWFjaGFibGUsIGV4cGVjdCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3ltYm9sVGFibGUge1xuICBzdGF0aWMgdG9wKCk6IFByb2dyYW1TeW1ib2xUYWJsZSB7XG4gICAgcmV0dXJuIG5ldyBQcm9ncmFtU3ltYm9sVGFibGUoKTtcbiAgfVxuXG4gIGFic3RyYWN0IGhhcyhuYW1lOiBzdHJpbmcpOiBib29sZWFuO1xuICBhYnN0cmFjdCBnZXQobmFtZTogc3RyaW5nKTogbnVtYmVyO1xuXG4gIGFic3RyYWN0IGdldExvY2Fsc01hcCgpOiBEaWN0PG51bWJlcj47XG4gIGFic3RyYWN0IGdldEV2YWxJbmZvKCk6IENvcmUuRXZhbEluZm87XG5cbiAgYWJzdHJhY3QgYWxsb2NhdGVOYW1lZChuYW1lOiBzdHJpbmcpOiBudW1iZXI7XG4gIGFic3RyYWN0IGFsbG9jYXRlQmxvY2sobmFtZTogc3RyaW5nKTogbnVtYmVyO1xuICBhYnN0cmFjdCBhbGxvY2F0ZShpZGVudGlmaWVyOiBzdHJpbmcpOiBudW1iZXI7XG5cbiAgY2hpbGQobG9jYWxzOiBzdHJpbmdbXSk6IEJsb2NrU3ltYm9sVGFibGUge1xuICAgIGxldCBzeW1ib2xzID0gbG9jYWxzLm1hcChuYW1lID0+IHRoaXMuYWxsb2NhdGUobmFtZSkpO1xuICAgIHJldHVybiBuZXcgQmxvY2tTeW1ib2xUYWJsZSh0aGlzLCBsb2NhbHMsIHN5bWJvbHMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9ncmFtU3ltYm9sVGFibGUgZXh0ZW5kcyBTeW1ib2xUYWJsZSB7XG4gIHB1YmxpYyBzeW1ib2xzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIHByaXZhdGUgc2l6ZSA9IDE7XG4gIHByaXZhdGUgbmFtZWQgPSBkaWN0PG51bWJlcj4oKTtcbiAgcHJpdmF0ZSBibG9ja3MgPSBkaWN0PG51bWJlcj4oKTtcblxuICBoYXMoX25hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGdldChfbmFtZTogc3RyaW5nKTogbmV2ZXIge1xuICAgIHRocm93IHVucmVhY2hhYmxlKCk7XG4gIH1cblxuICBnZXRMb2NhbHNNYXAoKTogRGljdDxudW1iZXI+IHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBnZXRFdmFsSW5mbygpOiBDb3JlLkV2YWxJbmZvIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBhbGxvY2F0ZU5hbWVkKG5hbWU6IHN0cmluZyk6IG51bWJlciB7XG4gICAgbGV0IG5hbWVkID0gdGhpcy5uYW1lZFtuYW1lXTtcblxuICAgIGlmICghbmFtZWQpIHtcbiAgICAgIG5hbWVkID0gdGhpcy5uYW1lZFtuYW1lXSA9IHRoaXMuYWxsb2NhdGUoYEAke25hbWV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWVkO1xuICB9XG5cbiAgYWxsb2NhdGVCbG9jayhuYW1lOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGxldCBibG9jayA9IHRoaXMuYmxvY2tzW25hbWVdO1xuXG4gICAgaWYgKCFibG9jaykge1xuICAgICAgYmxvY2sgPSB0aGlzLmJsb2Nrc1tuYW1lXSA9IHRoaXMuYWxsb2NhdGUoYCYke25hbWV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJsb2NrO1xuICB9XG5cbiAgYWxsb2NhdGUoaWRlbnRpZmllcjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICB0aGlzLnN5bWJvbHMucHVzaChpZGVudGlmaWVyKTtcbiAgICByZXR1cm4gdGhpcy5zaXplKys7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJsb2NrU3ltYm9sVGFibGUgZXh0ZW5kcyBTeW1ib2xUYWJsZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFyZW50OiBTeW1ib2xUYWJsZSwgcHVibGljIHN5bWJvbHM6IHN0cmluZ1tdLCBwdWJsaWMgc2xvdHM6IG51bWJlcltdKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGhhcyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMuc3ltYm9scy5pbmRleE9mKG5hbWUpICE9PSAtMSkgfHwgdGhpcy5wYXJlbnQuaGFzKG5hbWUpO1xuICB9XG5cbiAgZ2V0KG5hbWU6IHN0cmluZyk6IG51bWJlciB7XG4gICAgbGV0IHNsb3QgPSB0aGlzLnN5bWJvbHMuaW5kZXhPZihuYW1lKTtcbiAgICByZXR1cm4gc2xvdCA9PT0gLTEgPyB0aGlzLnBhcmVudC5nZXQobmFtZSkgOiB0aGlzLnNsb3RzW3Nsb3RdO1xuICB9XG5cbiAgZ2V0TG9jYWxzTWFwKCk6IERpY3Q8bnVtYmVyPiB7XG4gICAgbGV0IGRpY3QgPSB0aGlzLnBhcmVudC5nZXRMb2NhbHNNYXAoKTtcbiAgICB0aGlzLnN5bWJvbHMuZm9yRWFjaChzeW1ib2wgPT4gZGljdFtzeW1ib2xdID0gdGhpcy5nZXQoc3ltYm9sKSk7XG4gICAgcmV0dXJuIGRpY3Q7XG4gIH1cblxuICBnZXRFdmFsSW5mbygpOiBDb3JlLkV2YWxJbmZvIHtcbiAgICBsZXQgbG9jYWxzID0gdGhpcy5nZXRMb2NhbHNNYXAoKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobG9jYWxzKS5tYXAoc3ltYm9sID0+IGxvY2Fsc1tzeW1ib2xdKTtcbiAgfVxuXG4gIGFsbG9jYXRlTmFtZWQobmFtZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQuYWxsb2NhdGVOYW1lZChuYW1lKTtcbiAgfVxuXG4gIGFsbG9jYXRlQmxvY2sobmFtZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQuYWxsb2NhdGVCbG9jayhuYW1lKTtcbiAgfVxuXG4gIGFsbG9jYXRlKGlkZW50aWZpZXI6IHN0cmluZyk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50LmFsbG9jYXRlKGlkZW50aWZpZXIpO1xuICB9XG59XG5cbi8qKlxuICogVGFrZXMgaW4gYW4gQVNUIGFuZCBvdXRwdXRzIGEgbGlzdCBvZiBhY3Rpb25zIHRvIGJlIGNvbnN1bWVkXG4gKiBieSBhIGNvbXBpbGVyLiBGb3IgZXhhbXBsZSwgdGhlIHRlbXBsYXRlXG4gKlxuICogICAgIGZvb3t7YmFyfX08ZGl2PmJhejwvZGl2PlxuICpcbiAqIHByb2R1Y2VzIHRoZSBhY3Rpb25zXG4gKlxuICogICAgIFtbJ3N0YXJ0UHJvZ3JhbScsIFtwcm9ncmFtTm9kZSwgMF1dLFxuICogICAgICBbJ3RleHQnLCBbdGV4dE5vZGUsIDAsIDNdXSxcbiAqICAgICAgWydtdXN0YWNoZScsIFttdXN0YWNoZU5vZGUsIDEsIDNdXSxcbiAqICAgICAgWydvcGVuRWxlbWVudCcsIFtlbGVtZW50Tm9kZSwgMiwgMywgMF1dLFxuICogICAgICBbJ3RleHQnLCBbdGV4dE5vZGUsIDAsIDFdXSxcbiAqICAgICAgWydjbG9zZUVsZW1lbnQnLCBbZWxlbWVudE5vZGUsIDIsIDNdLFxuICogICAgICBbJ2VuZFByb2dyYW0nLCBbcHJvZ3JhbU5vZGVdXV1cbiAqXG4gKiBUaGlzIHZpc2l0b3Igd2Fsa3MgdGhlIEFTVCBkZXB0aCBmaXJzdCBhbmQgYmFja3dhcmRzLiBBc1xuICogYSByZXN1bHQgdGhlIGJvdHRvbS1tb3N0IGNoaWxkIHRlbXBsYXRlIHdpbGwgYXBwZWFyIGF0IHRoZVxuICogdG9wIG9mIHRoZSBhY3Rpb25zIGxpc3Qgd2hlcmVhcyB0aGUgcm9vdCB0ZW1wbGF0ZSB3aWxsIGFwcGVhclxuICogYXQgdGhlIGJvdHRvbSBvZiB0aGUgbGlzdC4gRm9yIGV4YW1wbGUsXG4gKlxuICogICAgIDxkaXY+e3sjaWZ9fWZvb3t7ZWxzZX19YmFyPGI+PC9iPnt7L2lmfX08L2Rpdj5cbiAqXG4gKiBwcm9kdWNlcyB0aGUgYWN0aW9uc1xuICpcbiAqICAgICBbWydzdGFydFByb2dyYW0nLCBbcHJvZ3JhbU5vZGUsIDBdXSxcbiAqICAgICAgWyd0ZXh0JywgW3RleHROb2RlLCAwLCAyLCAwXV0sXG4gKiAgICAgIFsnb3BlbkVsZW1lbnQnLCBbZWxlbWVudE5vZGUsIDEsIDIsIDBdXSxcbiAqICAgICAgWydjbG9zZUVsZW1lbnQnLCBbZWxlbWVudE5vZGUsIDEsIDJdXSxcbiAqICAgICAgWydlbmRQcm9ncmFtJywgW3Byb2dyYW1Ob2RlXV0sXG4gKiAgICAgIFsnc3RhcnRQcm9ncmFtJywgW3Byb2dyYW1Ob2RlLCAwXV0sXG4gKiAgICAgIFsndGV4dCcsIFt0ZXh0Tm9kZSwgMCwgMV1dLFxuICogICAgICBbJ2VuZFByb2dyYW0nLCBbcHJvZ3JhbU5vZGVdXSxcbiAqICAgICAgWydzdGFydFByb2dyYW0nLCBbcHJvZ3JhbU5vZGUsIDJdXSxcbiAqICAgICAgWydvcGVuRWxlbWVudCcsIFtlbGVtZW50Tm9kZSwgMCwgMSwgMV1dLFxuICogICAgICBbJ2Jsb2NrJywgW2Jsb2NrTm9kZSwgMCwgMV1dLFxuICogICAgICBbJ2Nsb3NlRWxlbWVudCcsIFtlbGVtZW50Tm9kZSwgMCwgMV1dLFxuICogICAgICBbJ2VuZFByb2dyYW0nLCBbcHJvZ3JhbU5vZGVdXV1cbiAqXG4gKiBUaGUgc3RhdGUgb2YgdGhlIHRyYXZlcnNhbCBpcyBtYWludGFpbmVkIGJ5IGEgc3RhY2sgb2YgZnJhbWVzLlxuICogV2hlbmV2ZXIgYSBub2RlIHdpdGggY2hpbGRyZW4gaXMgZW50ZXJlZCAoZWl0aGVyIGEgUHJvZ3JhbU5vZGVcbiAqIG9yIGFuIEVsZW1lbnROb2RlKSBhIGZyYW1lIGlzIHB1c2hlZCBvbnRvIHRoZSBzdGFjay4gVGhlIGZyYW1lXG4gKiBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3RhdGUgb2YgdGhlIHRyYXZlcnNhbCBvZiB0aGF0XG4gKiBub2RlLiBGb3IgZXhhbXBsZSxcbiAqXG4gKiAgIC0gaW5kZXggb2YgdGhlIGN1cnJlbnQgY2hpbGQgbm9kZSBiZWluZyB2aXNpdGVkXG4gKiAgIC0gdGhlIG51bWJlciBvZiBtdXN0YWNoZXMgY29udGFpbmVkIHdpdGhpbiBpdHMgY2hpbGQgbm9kZXNcbiAqICAgLSB0aGUgbGlzdCBvZiBhY3Rpb25zIGdlbmVyYXRlZCBieSBpdHMgY2hpbGQgbm9kZXNcbiAqL1xuXG5jbGFzcyBGcmFtZSB7XG4gIHB1YmxpYyBwYXJlbnROb2RlOiBPcHRpb248T2JqZWN0PiA9IG51bGw7XG4gIHB1YmxpYyBjaGlsZHJlbjogT3B0aW9uPEFTVC5Ob2RlW10+ID0gbnVsbDtcbiAgcHVibGljIGNoaWxkSW5kZXg6IE9wdGlvbjxudW1iZXI+ID0gbnVsbDtcbiAgcHVibGljIGNoaWxkQ291bnQ6IE9wdGlvbjxudW1iZXI+ID0gbnVsbDtcbiAgcHVibGljIGNoaWxkVGVtcGxhdGVDb3VudCA9IDA7XG4gIHB1YmxpYyBtdXN0YWNoZUNvdW50ID0gMDtcbiAgcHVibGljIGFjdGlvbnM6IEFjdGlvbltdID0gW107XG4gIHB1YmxpYyBibGFua0NoaWxkVGV4dE5vZGVzOiBPcHRpb248bnVtYmVyW10+ID0gbnVsbDtcbiAgcHVibGljIHN5bWJvbHM6IE9wdGlvbjxTeW1ib2xUYWJsZT4gPSBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEFjdGlvbiB7XG4gIGV4cG9ydCB0eXBlIFN0YXJ0UHJvZ3JhbSA9IFsnc3RhcnRQcm9ncmFtJywgW0FTVC5Qcm9ncmFtLCBudW1iZXIsIG51bWJlcltdXV07XG4gIGV4cG9ydCB0eXBlIEVuZFByb2dyYW0gPSBbJ2VuZFByb2dyYW0nLCBbQVNULlByb2dyYW0sIG51bWJlcl1dO1xuICBleHBvcnQgdHlwZSBTdGFydEJsb2NrID0gWydzdGFydEJsb2NrJywgW0FTVC5Qcm9ncmFtLCBudW1iZXIsIG51bWJlcltdXV07XG4gIGV4cG9ydCB0eXBlIEVuZEJsb2NrID0gWydlbmRCbG9jaycsIFtBU1QuUHJvZ3JhbSwgbnVtYmVyXV07XG4gIGV4cG9ydCB0eXBlIEJsb2NrID0gWydibG9jaycsIFtBU1QuQmxvY2tTdGF0ZW1lbnQsIG51bWJlciwgbnVtYmVyXV07XG4gIGV4cG9ydCB0eXBlIE11c3RhY2hlID0gWydtdXN0YWNoZScsIFtBU1QuTXVzdGFjaGVTdGF0ZW1lbnQgfCBBU1QuUGFydGlhbFN0YXRlbWVudCwgbnVtYmVyLCBudW1iZXJdXTtcbiAgZXhwb3J0IHR5cGUgT3BlbkVsZW1lbnQgPSBbJ29wZW5FbGVtZW50JywgW0FTVC5FbGVtZW50Tm9kZSwgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyW11dXTtcbiAgZXhwb3J0IHR5cGUgQ2xvc2VFbGVtZW50ID0gWydjbG9zZUVsZW1lbnQnLCBbQVNULkVsZW1lbnROb2RlLCBudW1iZXIsIG51bWJlcl1dO1xuICBleHBvcnQgdHlwZSBUZXh0ID0gWyd0ZXh0JywgW0FTVC5UZXh0Tm9kZSwgbnVtYmVyLCBudW1iZXJdXTtcbiAgZXhwb3J0IHR5cGUgQ29tbWVudCA9IFsnY29tbWVudCcsIFtBU1QuQ29tbWVudFN0YXRlbWVudCwgbnVtYmVyLCBudW1iZXJdXTtcblxuICBleHBvcnQgdHlwZSBBY3Rpb24gPVxuICAgICAgU3RhcnRQcm9ncmFtXG4gICAgfCBFbmRQcm9ncmFtXG4gICAgfCBTdGFydEJsb2NrXG4gICAgfCBFbmRCbG9ja1xuICAgIHwgQmxvY2tcbiAgICB8IE11c3RhY2hlXG4gICAgfCBPcGVuRWxlbWVudFxuICAgIHwgQ2xvc2VFbGVtZW50XG4gICAgfCBUZXh0XG4gICAgfCBDb21tZW50XG4gICAgO1xufVxuXG5leHBvcnQgdHlwZSBBY3Rpb24gPSBBY3Rpb24uQWN0aW9uO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1wbGF0ZVZpc2l0b3Ige1xuICBwcml2YXRlIGZyYW1lU3RhY2s6IEZyYW1lW10gPSBbXTtcbiAgcHVibGljIGFjdGlvbnM6IEFjdGlvbltdID0gW107XG4gIHByaXZhdGUgcHJvZ3JhbURlcHRoID0gLTE7XG5cbiAgdmlzaXQobm9kZTogQVNULkJhc2VOb2RlKSB7XG4gICAgdGhpc1tub2RlLnR5cGVdKG5vZGUpO1xuICB9XG5cbiAgLy8gVHJhdmVyc2FsIG1ldGhvZHNcblxuICBQcm9ncmFtKHByb2dyYW06IEFTVC5Qcm9ncmFtKSB7XG4gICAgdGhpcy5wcm9ncmFtRGVwdGgrKztcblxuICAgIGxldCBwYXJlbnRGcmFtZSA9IHRoaXMuZ2V0Q3VycmVudEZyYW1lKCk7XG4gICAgbGV0IHByb2dyYW1GcmFtZSA9IHRoaXMucHVzaEZyYW1lKCk7XG5cbiAgICBpZiAoIXBhcmVudEZyYW1lKSB7XG4gICAgICBwcm9ncmFtWydzeW1ib2xzJ10gPSBTeW1ib2xUYWJsZS50b3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvZ3JhbVsnc3ltYm9scyddID0gcGFyZW50RnJhbWUuc3ltYm9scyEuY2hpbGQocHJvZ3JhbS5ibG9ja1BhcmFtcyk7XG4gICAgfVxuXG4gICAgbGV0IHN0YXJ0VHlwZTogc3RyaW5nLCBlbmRUeXBlOiBzdHJpbmc7XG5cbiAgICBpZiAodGhpcy5wcm9ncmFtRGVwdGggPT09IDApIHtcbiAgICAgIHN0YXJ0VHlwZSA9ICdzdGFydFByb2dyYW0nO1xuICAgICAgZW5kVHlwZSA9ICdlbmRQcm9ncmFtJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRUeXBlID0gJ3N0YXJ0QmxvY2snO1xuICAgICAgZW5kVHlwZSA9ICdlbmRCbG9jayc7XG4gICAgfVxuXG4gICAgcHJvZ3JhbUZyYW1lLnBhcmVudE5vZGUgPSBwcm9ncmFtO1xuICAgIHByb2dyYW1GcmFtZS5jaGlsZHJlbiA9IHByb2dyYW0uYm9keTtcbiAgICBwcm9ncmFtRnJhbWUuY2hpbGRDb3VudCA9IHByb2dyYW0uYm9keS5sZW5ndGg7XG4gICAgcHJvZ3JhbUZyYW1lLmJsYW5rQ2hpbGRUZXh0Tm9kZXMgPSBbXTtcbiAgICBwcm9ncmFtRnJhbWUuYWN0aW9ucy5wdXNoKFtlbmRUeXBlLCBbcHJvZ3JhbSwgdGhpcy5wcm9ncmFtRGVwdGhdXSBhcyBBY3Rpb24pO1xuICAgIHByb2dyYW1GcmFtZS5zeW1ib2xzID0gcHJvZ3JhbVsnc3ltYm9scyddO1xuXG4gICAgZm9yIChsZXQgaSA9IHByb2dyYW0uYm9keS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgcHJvZ3JhbUZyYW1lLmNoaWxkSW5kZXggPSBpO1xuICAgICAgdGhpcy52aXNpdChwcm9ncmFtLmJvZHlbaV0pO1xuICAgIH1cblxuICAgIHByb2dyYW1GcmFtZS5hY3Rpb25zLnB1c2goW3N0YXJ0VHlwZSwgW1xuICAgICAgcHJvZ3JhbSwgcHJvZ3JhbUZyYW1lLmNoaWxkVGVtcGxhdGVDb3VudCxcbiAgICAgIHByb2dyYW1GcmFtZS5ibGFua0NoaWxkVGV4dE5vZGVzLnJldmVyc2UoKVxuICAgIF1dIGFzIEFjdGlvbik7XG4gICAgdGhpcy5wb3BGcmFtZSgpO1xuXG4gICAgdGhpcy5wcm9ncmFtRGVwdGgtLTtcblxuICAgIC8vIFB1c2ggdGhlIGNvbXBsZXRlZCB0ZW1wbGF0ZSBpbnRvIHRoZSBnbG9iYWwgYWN0aW9ucyBsaXN0XG4gICAgaWYgKHBhcmVudEZyYW1lKSB7IHBhcmVudEZyYW1lLmNoaWxkVGVtcGxhdGVDb3VudCsrOyB9XG4gICAgdGhpcy5hY3Rpb25zLnB1c2goLi4ucHJvZ3JhbUZyYW1lLmFjdGlvbnMucmV2ZXJzZSgpKTtcbiAgfVxuXG4gIEVsZW1lbnROb2RlKGVsZW1lbnQ6IEFTVC5FbGVtZW50Tm9kZSkge1xuICAgIGxldCBwYXJlbnRGcmFtZSA9IHRoaXMuY3VycmVudEZyYW1lO1xuICAgIGxldCBlbGVtZW50RnJhbWUgPSB0aGlzLnB1c2hGcmFtZSgpO1xuXG4gICAgZWxlbWVudEZyYW1lLnBhcmVudE5vZGUgPSBlbGVtZW50O1xuICAgIGVsZW1lbnRGcmFtZS5jaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW47XG4gICAgZWxlbWVudEZyYW1lLmNoaWxkQ291bnQgPSBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDtcbiAgICBlbGVtZW50RnJhbWUubXVzdGFjaGVDb3VudCArPSBlbGVtZW50Lm1vZGlmaWVycy5sZW5ndGg7XG4gICAgZWxlbWVudEZyYW1lLmJsYW5rQ2hpbGRUZXh0Tm9kZXMgPSBbXTtcbiAgICBlbGVtZW50RnJhbWUuc3ltYm9scyA9IGVsZW1lbnRbJ3N5bWJvbHMnXSA9IHBhcmVudEZyYW1lLnN5bWJvbHMhLmNoaWxkKGVsZW1lbnQuYmxvY2tQYXJhbXMpO1xuXG4gICAgbGV0IGFjdGlvbkFyZ3M6IFtBU1QuRWxlbWVudE5vZGUsIG51bWJlciwgbnVtYmVyXSA9IFtcbiAgICAgIGVsZW1lbnQsXG4gICAgICBwYXJlbnRGcmFtZS5jaGlsZEluZGV4ISxcbiAgICAgIHBhcmVudEZyYW1lLmNoaWxkQ291bnQhXG4gICAgXTtcblxuICAgIGVsZW1lbnRGcmFtZS5hY3Rpb25zLnB1c2goWydjbG9zZUVsZW1lbnQnLCBhY3Rpb25BcmdzXSk7XG5cbiAgICBmb3IgKGxldCBpID0gZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB0aGlzLnZpc2l0KGVsZW1lbnQuYXR0cmlidXRlc1tpXSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGVsZW1lbnRGcmFtZS5jaGlsZEluZGV4ID0gaTtcbiAgICAgIHRoaXMudmlzaXQoZWxlbWVudC5jaGlsZHJlbltpXSk7XG4gICAgfVxuXG4gICAgbGV0IG9wZW4gPSBbJ29wZW5FbGVtZW50JywgWy4uLmFjdGlvbkFyZ3MsIGVsZW1lbnRGcmFtZS5tdXN0YWNoZUNvdW50LCBlbGVtZW50RnJhbWUuYmxhbmtDaGlsZFRleHROb2Rlcy5yZXZlcnNlKCldXSBhcyBBY3Rpb24uT3BlbkVsZW1lbnQ7XG4gICAgZWxlbWVudEZyYW1lLmFjdGlvbnMucHVzaChvcGVuKTtcblxuICAgIHRoaXMucG9wRnJhbWUoKTtcblxuICAgIC8vIFByb3BhZ2F0ZSB0aGUgZWxlbWVudCdzIGZyYW1lIHN0YXRlIHRvIHRoZSBwYXJlbnQgZnJhbWVcbiAgICBpZiAoZWxlbWVudEZyYW1lLm11c3RhY2hlQ291bnQgPiAwKSB7IHBhcmVudEZyYW1lLm11c3RhY2hlQ291bnQrKzsgfVxuICAgIHBhcmVudEZyYW1lLmNoaWxkVGVtcGxhdGVDb3VudCArPSBlbGVtZW50RnJhbWUuY2hpbGRUZW1wbGF0ZUNvdW50O1xuICAgIHBhcmVudEZyYW1lLmFjdGlvbnMucHVzaCguLi5lbGVtZW50RnJhbWUuYWN0aW9ucyk7XG4gIH1cblxuICBBdHRyTm9kZShhdHRyOiBBU1QuQXR0ck5vZGUpIHtcbiAgICBpZiAoYXR0ci52YWx1ZS50eXBlICE9PSAnVGV4dE5vZGUnKSB7XG4gICAgICB0aGlzLmN1cnJlbnRGcmFtZS5tdXN0YWNoZUNvdW50Kys7XG4gICAgfVxuICB9O1xuXG4gIFRleHROb2RlKHRleHQ6IEFTVC5UZXh0Tm9kZSkge1xuICAgIGxldCBmcmFtZSA9IHRoaXMuY3VycmVudEZyYW1lO1xuICAgIGlmICh0ZXh0LmNoYXJzID09PSAnJykge1xuICAgICAgZnJhbWUuYmxhbmtDaGlsZFRleHROb2RlcyEucHVzaChkb21JbmRleE9mKGZyYW1lLmNoaWxkcmVuISwgdGV4dCkpO1xuICAgIH1cbiAgICBmcmFtZS5hY3Rpb25zLnB1c2goWyd0ZXh0JywgW3RleHQsIGZyYW1lLmNoaWxkSW5kZXgsIGZyYW1lLmNoaWxkQ291bnRdXSBhcyBBY3Rpb24pO1xuICB9O1xuXG4gIEJsb2NrU3RhdGVtZW50KG5vZGU6IEFTVC5CbG9ja1N0YXRlbWVudCkge1xuICAgIGxldCBmcmFtZSA9IHRoaXMuY3VycmVudEZyYW1lO1xuXG4gICAgZnJhbWUubXVzdGFjaGVDb3VudCsrO1xuICAgIGZyYW1lLmFjdGlvbnMucHVzaChbJ2Jsb2NrJywgW25vZGUsIGZyYW1lLmNoaWxkSW5kZXgsIGZyYW1lLmNoaWxkQ291bnRdXSBhcyBBY3Rpb24pO1xuXG4gICAgaWYgKG5vZGUuaW52ZXJzZSkgeyB0aGlzLnZpc2l0KG5vZGUuaW52ZXJzZSk7IH1cbiAgICBpZiAobm9kZS5wcm9ncmFtKSB7IHRoaXMudmlzaXQobm9kZS5wcm9ncmFtKTsgfVxuICB9O1xuXG4gIFBhcnRpYWxTdGF0ZW1lbnQobm9kZTogQVNULlBhcnRpYWxTdGF0ZW1lbnQpIHtcbiAgICBsZXQgZnJhbWUgPSB0aGlzLmN1cnJlbnRGcmFtZTtcbiAgICBmcmFtZS5tdXN0YWNoZUNvdW50Kys7XG4gICAgZnJhbWUuYWN0aW9ucy5wdXNoKFsnbXVzdGFjaGUnLCBbbm9kZSwgZnJhbWUuY2hpbGRJbmRleCwgZnJhbWUuY2hpbGRDb3VudF1dIGFzIEFjdGlvbik7XG4gIH07XG5cbiAgQ29tbWVudFN0YXRlbWVudCh0ZXh0OiBBU1QuQ29tbWVudFN0YXRlbWVudCkge1xuICAgIGxldCBmcmFtZSA9IHRoaXMuY3VycmVudEZyYW1lO1xuICAgIGZyYW1lLmFjdGlvbnMucHVzaChbJ2NvbW1lbnQnLCBbdGV4dCwgZnJhbWUuY2hpbGRJbmRleCwgZnJhbWUuY2hpbGRDb3VudF1dIGFzIEFjdGlvbik7XG4gIH07XG5cbiAgTXVzdGFjaGVDb21tZW50U3RhdGVtZW50KCkge1xuICAgIC8vIEludGVudGlvbmFsIGVtcHR5OiBIYW5kbGViYXJzIGNvbW1lbnRzIHNob3VsZCBub3QgYWZmZWN0IG91dHB1dC5cbiAgfTtcblxuICBNdXN0YWNoZVN0YXRlbWVudChtdXN0YWNoZTogQVNULk11c3RhY2hlU3RhdGVtZW50KSB7XG4gICAgbGV0IGZyYW1lID0gdGhpcy5jdXJyZW50RnJhbWU7XG4gICAgZnJhbWUubXVzdGFjaGVDb3VudCsrO1xuICAgIGZyYW1lLmFjdGlvbnMucHVzaChbJ211c3RhY2hlJywgW211c3RhY2hlLCBmcmFtZS5jaGlsZEluZGV4LCBmcmFtZS5jaGlsZENvdW50XV0gYXMgQWN0aW9uKTtcbiAgfTtcblxuICAvLyBGcmFtZSBoZWxwZXJzXG5cbiAgcHJpdmF0ZSBnZXQgY3VycmVudEZyYW1lKCk6IEZyYW1lIHtcbiAgICByZXR1cm4gZXhwZWN0KHRoaXMuZ2V0Q3VycmVudEZyYW1lKCksIFwiRXhwZWN0ZWQgYSBjdXJyZW50IGZyYW1lXCIpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDdXJyZW50RnJhbWUoKTogT3B0aW9uPEZyYW1lPiB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVTdGFja1t0aGlzLmZyYW1lU3RhY2subGVuZ3RoIC0gMV07XG4gIH1cblxuICBwcml2YXRlIHB1c2hGcmFtZSgpIHtcbiAgICBsZXQgZnJhbWUgPSBuZXcgRnJhbWUoKTtcbiAgICB0aGlzLmZyYW1lU3RhY2sucHVzaChmcmFtZSk7XG4gICAgcmV0dXJuIGZyYW1lO1xuICB9XG5cbiAgcHJpdmF0ZSBwb3BGcmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5mcmFtZVN0YWNrLnBvcCgpO1xuICB9XG59XG5cbi8vIFJldHVybnMgdGhlIGluZGV4IG9mIGBkb21Ob2RlYCBpbiB0aGUgYG5vZGVzYCBhcnJheSwgc2tpcHBpbmdcbi8vIG92ZXIgYW55IG5vZGVzIHdoaWNoIGRvIG5vdCByZXByZXNlbnQgRE9NIG5vZGVzLlxuZnVuY3Rpb24gZG9tSW5kZXhPZihub2RlczogQVNULk5vZGVbXSwgZG9tTm9kZTogQVNULlRleHROb2RlIHwgQVNULkVsZW1lbnROb2RlKSB7XG4gIGxldCBpbmRleCA9IC0xO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgbm9kZSA9IG5vZGVzW2ldO1xuXG4gICAgaWYgKG5vZGUudHlwZSAhPT0gJ1RleHROb2RlJyAmJiBub2RlLnR5cGUgIT09ICdFbGVtZW50Tm9kZScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGlmIChub2RlID09PSBkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuIl19