"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.precompile = precompile;

var _syntax = require("@glimmer/syntax");

var _templateCompiler = require("./template-compiler");

var _templateCompiler2 = _interopRequireDefault(_templateCompiler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultId = function () {
    if (typeof require === 'function') {
        try {
            /* tslint:disable:no-require-imports */
            var crypto = require('crypto');
            /* tslint:enable:no-require-imports */
            var idFn = function idFn(src) {
                var hash = crypto.createHash('sha1');
                hash.update(src, 'utf8');
                // trim to 6 bytes of data (2^48 - 1)
                return hash.digest('base64').substring(0, 8);
            };
            idFn("test");
            return idFn;
        } catch (e) {}
    }
    return function idFn() {
        return null;
    };
}();
var defaultOptions = {
    id: defaultId,
    meta: {}
};
function precompile(string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

    var ast = (0, _syntax.preprocess)(string, options);

    var _TemplateCompiler$com = _templateCompiler2.default.compile(options, ast),
        block = _TemplateCompiler$com.block,
        meta = _TemplateCompiler$com.meta;

    var idFn = options.id || defaultId;
    var blockJSON = JSON.stringify(block.toJSON());
    var templateJSONObject = {
        id: idFn(JSON.stringify(meta) + blockJSON),
        block: blockJSON,
        meta: meta
    };
    // JSON is javascript
    return JSON.stringify(templateJSONObject);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9jb21waWxlci9saWIvY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLEFBQU8sQUFBRSxBQUFVLEFBQUUsQUFBTSxBQUFpQixBQUFDOztBQUM3QyxBQUFPLEFBQW9DLEFBQU0sQUFBcUIsQUFBQzs7Ozs7O0FBZXZFLElBQU0sQUFBUyx3QkFDYixBQUFFLEFBQUM7UUFBQyxPQUFPLEFBQU8sWUFBSyxBQUFVLEFBQUMsWUFBQyxBQUFDLEFBQ2xDO1lBQUksQUFBQyxBQUNILEFBQXVDLEFBQ3ZDOztnQkFBTSxBQUFNLFNBQUcsQUFBTyxRQUFDLEFBQVEsQUFBQyxBQUFDLEFBQ2pDLEFBQXNDLEFBRXRDOztnQkFBSSxBQUFJLE9BQWlCLEFBQUcsbUJBQzFCO29CQUFJLEFBQUksT0FBRyxBQUFNLE9BQUMsQUFBVSxXQUFDLEFBQU0sQUFBQyxBQUFDLEFBQ3JDLEFBQUk7cUJBQUMsQUFBTSxPQUFDLEFBQUcsS0FBRSxBQUFNLEFBQUMsQUFBQyxBQUN6QixBQUFxQyxBQUNyQyxBQUFNOzt1QkFBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQVEsQUFBQyxVQUFDLEFBQVMsVUFBQyxBQUFDLEdBQUMsQUFBQyxBQUFDLEFBQUMsQUFDOUMsQUFBQyxBQUFDLEFBRUYsQUFBSTs7aUJBQUMsQUFBTSxBQUFDLEFBQUMsQUFFYixBQUFNO21CQUFDLEFBQUksQUFBQyxBQUNkLEFBQUM7VUFBQyxBQUFLLEFBQUMsT0FBQyxBQUFDLEFBQUMsR0FBQyxBQUFDLEFBQ2IsQUFBQyxBQUNILEFBQUMsQ0FFRCxBQUFNOztXQUFDLGdCQUFrQixBQUFNO2VBQUMsQUFBSSxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBQzFDLEFBQUMsQUFBQyxBQUFFLEFBQUM7QUF0QjJCO0NBQUM7QUF3QmpDLElBQU0sQUFBYztRQUNkLEFBQVMsQUFDYixBQUFJO1VBRmtELEFBQ3RELEFBQUUsQUFDSSxBQUFFLEFBQ1QsQUFBQyxBQWlCRixBQUFNOztvQkFBcUIsQUFBYyxRQUN2QztRQUR5Qyw4RUFBMkMsQUFBYzs7UUFDOUYsQUFBRyxNQUFHLEFBQVUsd0JBQUMsQUFBTSxRQUFFLEFBQU8sQUFBQyxBQUFDLEFBQ3RDLEFBQUk7O2dDQUFrQixBQUFnQiwyQkFBQyxBQUFPLFFBQUMsQUFBTyxTQUFFLEFBQUcsQUFBQyxBQUFDLEFBQzdEO1FBRE0sQUFBSztRQUFFLEFBQUksQUFBRTs7UUFDZixBQUFJLE9BQUcsQUFBTyxRQUFDLEFBQUUsTUFBSSxBQUFTLEFBQUMsQUFDbkM7UUFBSSxBQUFTLFlBQUcsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFLLE1BQUMsQUFBTSxBQUFFLEFBQUMsQUFBQyxBQUMvQztRQUFJLEFBQWtCO1lBQ2hCLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQUksQUFBQyxRQUFHLEFBQVMsQUFBQyxBQUMxQyxBQUFLO2VBRmlFLEFBRS9ELEFBQVMsQUFDaEIsQUFBSSxBQUNMLEFBQUMsQUFFRixBQUFxQjtjQUxuQixBQUFFLEFBTUosQUFBTTs7O1dBQUMsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFrQixBQUFDLEFBQUMsQUFDNUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByZXByb2Nlc3MgfSBmcm9tIFwiQGdsaW1tZXIvc3ludGF4XCI7XG5pbXBvcnQgVGVtcGxhdGVDb21waWxlciwgeyBDb21waWxlT3B0aW9ucyB9IGZyb20gXCIuL3RlbXBsYXRlLWNvbXBpbGVyXCI7XG5pbXBvcnQgeyBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrLCBUZW1wbGF0ZUphdmFzY3JpcHQsIFRlbXBsYXRlTWV0YSB9IGZyb20gXCJAZ2xpbW1lci93aXJlLWZvcm1hdFwiO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSBcIkBnbGltbWVyL2ludGVyZmFjZXNcIjtcbmltcG9ydCB7IFByZXByb2Nlc3NPcHRpb25zIH0gZnJvbSBcIkBnbGltbWVyL3N5bnRheFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlSWRGbiB7XG4gIChzcmM6IHN0cmluZyk6IE9wdGlvbjxzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZWNvbXBpbGVPcHRpb25zPFQgZXh0ZW5kcyBUZW1wbGF0ZU1ldGE+IGV4dGVuZHMgQ29tcGlsZU9wdGlvbnM8VD4sIFByZXByb2Nlc3NPcHRpb25zIHtcbiAgaWQ/OiBUZW1wbGF0ZUlkRm47XG59XG5cbmRlY2xhcmUgZnVuY3Rpb24gcmVxdWlyZShpZDogc3RyaW5nKTogYW55O1xuXG5jb25zdCBkZWZhdWx0SWQ6IFRlbXBsYXRlSWRGbiA9ICgoKSA9PiB7XG4gIGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1yZXF1aXJlLWltcG9ydHMgKi9cbiAgICAgIGNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICAgICAgLyogdHNsaW50OmVuYWJsZTpuby1yZXF1aXJlLWltcG9ydHMgKi9cblxuICAgICAgbGV0IGlkRm46IFRlbXBsYXRlSWRGbiA9IHNyYyA9PiB7XG4gICAgICAgIGxldCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKTtcbiAgICAgICAgaGFzaC51cGRhdGUoc3JjLCAndXRmOCcpO1xuICAgICAgICAvLyB0cmltIHRvIDYgYnl0ZXMgb2YgZGF0YSAoMl40OCAtIDEpXG4gICAgICAgIHJldHVybiBoYXNoLmRpZ2VzdCgnYmFzZTY0Jykuc3Vic3RyaW5nKDAsOCk7XG4gICAgICB9O1xuXG4gICAgICBpZEZuKFwidGVzdFwiKTtcblxuICAgICAgcmV0dXJuIGlkRm47XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBpZEZuKCkgeyByZXR1cm4gbnVsbDsgfTtcbn0pKCk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBQcmVjb21waWxlT3B0aW9uczxUZW1wbGF0ZU1ldGE+ID0ge1xuICBpZDogZGVmYXVsdElkLFxuICBtZXRhOiB7fVxufTtcblxuLypcbiAqIENvbXBpbGUgYSBzdHJpbmcgaW50byBhIHRlbXBsYXRlIGphdmFzY3JpcHQgc3RyaW5nLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiAgICAgaW1wb3J0IHsgcHJlY29tcGlsZSB9IGZyb20gJ0BnbGltbWVyL2NvbXBpbGVyJztcbiAqICAgICBpbXBvcnQgeyB0ZW1wbGF0ZUZhY3RvcnkgfSBmcm9tICdnbGltZXItcnVudGltZSc7XG4gKiAgICAgbGV0IHRlbXBsYXRlSnMgPSBwcmVjb21waWxlKFwiSG93ZHkge3tuYW1lfX1cIik7XG4gKiAgICAgbGV0IGZhY3RvcnkgPSB0ZW1wbGF0ZUZhY3RvcnkobmV3IEZ1bmN0aW9uKFwicmV0dXJuIFwiICsgdGVtcGxhdGVKcykoKSk7XG4gKiAgICAgbGV0IHRlbXBsYXRlID0gZmFjdG9yeS5jcmVhdGUoZW52KTtcbiAqXG4gKiBAbWV0aG9kIHByZWNvbXBpbGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgYSBHbGltbWVyIHRlbXBsYXRlIHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfSBhIHRlbXBsYXRlIGphdmFzY3JpcHQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVjb21waWxlPFQgZXh0ZW5kcyBUZW1wbGF0ZU1ldGE+KHN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUHJlY29tcGlsZU9wdGlvbnM8VD4pOiBUZW1wbGF0ZUphdmFzY3JpcHQ7XG5leHBvcnQgZnVuY3Rpb24gcHJlY29tcGlsZShzdHJpbmc6IHN0cmluZywgb3B0aW9uczogUHJlY29tcGlsZU9wdGlvbnM8VGVtcGxhdGVNZXRhPiA9IGRlZmF1bHRPcHRpb25zKTogVGVtcGxhdGVKYXZhc2NyaXB0IHtcbiAgbGV0IGFzdCA9IHByZXByb2Nlc3Moc3RyaW5nLCBvcHRpb25zKTtcbiAgbGV0IHsgYmxvY2ssIG1ldGEgfSA9IFRlbXBsYXRlQ29tcGlsZXIuY29tcGlsZShvcHRpb25zLCBhc3QpO1xuICBsZXQgaWRGbiA9IG9wdGlvbnMuaWQgfHwgZGVmYXVsdElkO1xuICBsZXQgYmxvY2tKU09OID0gSlNPTi5zdHJpbmdpZnkoYmxvY2sudG9KU09OKCkpO1xuICBsZXQgdGVtcGxhdGVKU09OT2JqZWN0OiBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrPFRlbXBsYXRlTWV0YT4gPSB7XG4gICAgaWQ6IGlkRm4oSlNPTi5zdHJpbmdpZnkobWV0YSkgKyBibG9ja0pTT04pLFxuICAgIGJsb2NrOiBibG9ja0pTT04sXG4gICAgbWV0YVxuICB9O1xuXG4gIC8vIEpTT04gaXMgamF2YXNjcmlwdFxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGVtcGxhdGVKU09OT2JqZWN0KTtcbn1cbiJdfQ==