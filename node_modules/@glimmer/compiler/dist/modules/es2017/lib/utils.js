export function processOpcodes(compiler, opcodes) {
    for (let i = 0, l = opcodes.length; i < l; i++) {
        let method = opcodes[i][0];
        let params = opcodes[i][1];
        if (params) {
            compiler[method].apply(compiler, params);
        } else {
            compiler[method].call(compiler);
        }
    }
}
// There is a small whitelist of namespaced attributes specially
// enumerated in
// https://www.w3.org/TR/html/syntax.html#attributes-0
//
// > When a foreign element has one of the namespaced attributes given by
// > the local name and namespace of the first and second cells of a row
// > from the following table, it must be written using the name given by
// > the third cell from the same row.
//
// In all other cases, colons are interpreted as a regular character
// with no special meaning:
//
// > No other namespaced attribute can be expressed in the HTML syntax.
const XLINK = 'http://www.w3.org/1999/xlink';
const XML = 'http://www.w3.org/XML/1998/namespace';
const XMLNS = 'http://www.w3.org/2000/xmlns/';
const WHITELIST = {
    'xlink:actuate': XLINK,
    'xlink:arcrole': XLINK,
    'xlink:href': XLINK,
    'xlink:role': XLINK,
    'xlink:show': XLINK,
    'xlink:title': XLINK,
    'xlink:type': XLINK,
    'xml:base': XML,
    'xml:lang': XML,
    'xml:space': XML,
    'xmlns': XMLNS,
    'xmlns:xlink': XMLNS
};
export function getAttrNamespace(attrName) {
    return WHITELIST[attrName] || null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9jb21waWxlci9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTSwrQkFBeUIsQUFBYSxVQUFFLEFBQVk7QUFDeEQsQUFBRyxBQUFDLFNBQUMsSUFBSSxBQUFDLElBQUMsQUFBQyxHQUFFLEFBQUMsSUFBQyxBQUFPLFFBQUMsQUFBTSxRQUFFLEFBQUMsSUFBQyxBQUFDLEdBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUN6QyxZQUFJLEFBQU0sU0FBRyxBQUFPLFFBQUMsQUFBQyxBQUFDLEdBQUMsQUFBQyxBQUFDLEFBQUM7QUFDM0IsWUFBSSxBQUFNLFNBQUcsQUFBTyxRQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUMsQUFBQyxBQUFDO0FBQzNCLEFBQUUsQUFBQyxZQUFDLEFBQU0sQUFBQyxRQUFDLEFBQUM7QUFDWCxBQUFRLHFCQUFDLEFBQU0sQUFBQyxRQUFDLEFBQUssTUFBQyxBQUFRLFVBQUUsQUFBTSxBQUFDLEFBQUMsQUFDM0M7QUFBQyxBQUFDLEFBQUksZUFBQyxBQUFDO0FBQ04sQUFBUSxxQkFBQyxBQUFNLEFBQUMsUUFBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLEFBQUMsQUFDbEM7QUFBQyxBQUNIO0FBQUMsQUFDSDtBQUFDO0FBRUQsQUFBZ0U7QUFDaEUsQUFBZ0I7QUFDaEIsQUFBc0Q7QUFDdEQsQUFBRTtBQUNGLEFBQXlFO0FBQ3pFLEFBQXdFO0FBQ3hFLEFBQXlFO0FBQ3pFLEFBQXNDO0FBQ3RDLEFBQUU7QUFDRixBQUFvRTtBQUNwRSxBQUEyQjtBQUMzQixBQUFFO0FBQ0YsQUFBdUU7QUFFdkUsTUFBTSxBQUFLLFFBQUcsQUFBOEIsQUFBQztBQUM3QyxNQUFNLEFBQUcsTUFBRyxBQUFzQyxBQUFDO0FBQ25ELE1BQU0sQUFBSyxRQUFHLEFBQStCLEFBQUM7QUFFOUMsTUFBTSxBQUFTO0FBQ2IsQUFBZSxxQkFBRSxBQUFLO0FBQ3RCLEFBQWUscUJBQUUsQUFBSztBQUN0QixBQUFZLGtCQUFFLEFBQUs7QUFDbkIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVksa0JBQUUsQUFBSztBQUNuQixBQUFhLG1CQUFFLEFBQUs7QUFDcEIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVcsaUJBQUUsQUFBRztBQUNoQixBQUFPLGFBQUUsQUFBSztBQUNkLEFBQWEsbUJBQUUsQUFBSyxBQUNyQixBQUFDO0FBYmdCO0FBZWxCLEFBQU0saUNBQTJCLEFBQWdCO0FBQy9DLEFBQU0sV0FBQyxBQUFTLFVBQUMsQUFBUSxBQUFDLGFBQUksQUFBSSxBQUFDLEFBQ3JDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcHJvY2Vzc09wY29kZXMoY29tcGlsZXI6IGFueSwgb3Bjb2RlczogYW55KSB7XG4gIGZvciAobGV0IGk9MCwgbD1vcGNvZGVzLmxlbmd0aDsgaTxsOyBpKyspIHtcbiAgICBsZXQgbWV0aG9kID0gb3Bjb2Rlc1tpXVswXTtcbiAgICBsZXQgcGFyYW1zID0gb3Bjb2Rlc1tpXVsxXTtcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBjb21waWxlclttZXRob2RdLmFwcGx5KGNvbXBpbGVyLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21waWxlclttZXRob2RdLmNhbGwoY29tcGlsZXIpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGVyZSBpcyBhIHNtYWxsIHdoaXRlbGlzdCBvZiBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMgc3BlY2lhbGx5XG4vLyBlbnVtZXJhdGVkIGluXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTBcbi8vXG4vLyA+IFdoZW4gYSBmb3JlaWduIGVsZW1lbnQgaGFzIG9uZSBvZiB0aGUgbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIGdpdmVuIGJ5XG4vLyA+IHRoZSBsb2NhbCBuYW1lIGFuZCBuYW1lc3BhY2Ugb2YgdGhlIGZpcnN0IGFuZCBzZWNvbmQgY2VsbHMgb2YgYSByb3dcbi8vID4gZnJvbSB0aGUgZm9sbG93aW5nIHRhYmxlLCBpdCBtdXN0IGJlIHdyaXR0ZW4gdXNpbmcgdGhlIG5hbWUgZ2l2ZW4gYnlcbi8vID4gdGhlIHRoaXJkIGNlbGwgZnJvbSB0aGUgc2FtZSByb3cuXG4vL1xuLy8gSW4gYWxsIG90aGVyIGNhc2VzLCBjb2xvbnMgYXJlIGludGVycHJldGVkIGFzIGEgcmVndWxhciBjaGFyYWN0ZXJcbi8vIHdpdGggbm8gc3BlY2lhbCBtZWFuaW5nOlxuLy9cbi8vID4gTm8gb3RoZXIgbmFtZXNwYWNlZCBhdHRyaWJ1dGUgY2FuIGJlIGV4cHJlc3NlZCBpbiB0aGUgSFRNTCBzeW50YXguXG5cbmNvbnN0IFhMSU5LID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuY29uc3QgWE1MID0gJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSc7XG5jb25zdCBYTUxOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyc7XG5cbmNvbnN0IFdISVRFTElTVCA9IHtcbiAgJ3hsaW5rOmFjdHVhdGUnOiBYTElOSyxcbiAgJ3hsaW5rOmFyY3JvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOmhyZWYnOiBYTElOSyxcbiAgJ3hsaW5rOnJvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOnNob3cnOiBYTElOSyxcbiAgJ3hsaW5rOnRpdGxlJzogWExJTkssXG4gICd4bGluazp0eXBlJzogWExJTkssXG4gICd4bWw6YmFzZSc6IFhNTCxcbiAgJ3htbDpsYW5nJzogWE1MLFxuICAneG1sOnNwYWNlJzogWE1MLFxuICAneG1sbnMnOiBYTUxOUyxcbiAgJ3htbG5zOnhsaW5rJzogWE1MTlNcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyTmFtZXNwYWNlKGF0dHJOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFdISVRFTElTVFthdHRyTmFtZV0gfHwgbnVsbDtcbn1cbiJdfQ==