import { preprocess } from "@glimmer/syntax";
import TemplateCompiler from "./template-compiler";
const defaultId = (() => {
    if (typeof require === 'function') {
        try {
            /* tslint:disable:no-require-imports */
            const crypto = require('crypto');
            /* tslint:enable:no-require-imports */
            let idFn = src => {
                let hash = crypto.createHash('sha1');
                hash.update(src, 'utf8');
                // trim to 6 bytes of data (2^48 - 1)
                return hash.digest('base64').substring(0, 8);
            };
            idFn("test");
            return idFn;
        } catch (e) {}
    }
    return function idFn() {
        return null;
    };
})();
const defaultOptions = {
    id: defaultId,
    meta: {}
};
export function precompile(string, options = defaultOptions) {
    let ast = preprocess(string, options);
    let { block, meta } = TemplateCompiler.compile(options, ast);
    let idFn = options.id || defaultId;
    let blockJSON = JSON.stringify(block.toJSON());
    let templateJSONObject = {
        id: idFn(JSON.stringify(meta) + blockJSON),
        block: blockJSON,
        meta
    };
    // JSON is javascript
    return JSON.stringify(templateJSONObject);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9jb21waWxlci9saWIvY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTyxTQUFFLEFBQVUsQUFBRSxrQkFBTSxBQUFpQixBQUFDO0FBQzdDLE9BQU8sQUFBb0Msc0JBQU0sQUFBcUIsQUFBQztBQWV2RSxNQUFNLEFBQVMsYUFBa0I7QUFDL0IsQUFBRSxBQUFDLFFBQUMsT0FBTyxBQUFPLFlBQUssQUFBVSxBQUFDLFlBQUMsQUFBQztBQUNsQyxZQUFJLEFBQUM7QUFDSCxBQUF1QztBQUN2QyxrQkFBTSxBQUFNLFNBQUcsQUFBTyxRQUFDLEFBQVEsQUFBQyxBQUFDO0FBQ2pDLEFBQXNDO0FBRXRDLGdCQUFJLEFBQUksT0FBaUIsQUFBRztBQUMxQixvQkFBSSxBQUFJLE9BQUcsQUFBTSxPQUFDLEFBQVUsV0FBQyxBQUFNLEFBQUMsQUFBQztBQUNyQyxBQUFJLHFCQUFDLEFBQU0sT0FBQyxBQUFHLEtBQUUsQUFBTSxBQUFDLEFBQUM7QUFDekIsQUFBcUM7QUFDckMsQUFBTSx1QkFBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQVEsQUFBQyxVQUFDLEFBQVMsVUFBQyxBQUFDLEdBQUMsQUFBQyxBQUFDLEFBQUMsQUFDOUM7QUFBQyxBQUFDO0FBRUYsQUFBSSxpQkFBQyxBQUFNLEFBQUMsQUFBQztBQUViLEFBQU0sbUJBQUMsQUFBSSxBQUFDLEFBQ2Q7QUFBQyxVQUFDLEFBQUssQUFBQyxPQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUMsQUFDYixDQUFDLEFBQ0g7QUFBQztBQUVELEFBQU0sV0FBQztBQUFrQixBQUFNLGVBQUMsQUFBSSxBQUFDLEFBQUM7QUFBQyxBQUFDLEFBQzFDO0FBQUMsQUFBQyxBQUFFLEFBQUMsQ0F0QjJCO0FBd0JoQyxNQUFNLEFBQWM7QUFDbEIsQUFBRSxRQUFFLEFBQVM7QUFDYixBQUFJLFVBQUUsQUFBRSxBQUNULEFBQUM7QUFIc0Q7QUFvQnhELEFBQU0sMkJBQXFCLEFBQWMsUUFBRSxVQUEyQyxBQUFjO0FBQ2xHLFFBQUksQUFBRyxNQUFHLEFBQVUsV0FBQyxBQUFNLFFBQUUsQUFBTyxBQUFDLEFBQUM7QUFDdEMsUUFBSSxFQUFFLEFBQUssT0FBRSxBQUFJLEFBQUUsU0FBRyxBQUFnQixpQkFBQyxBQUFPLFFBQUMsQUFBTyxTQUFFLEFBQUcsQUFBQyxBQUFDO0FBQzdELFFBQUksQUFBSSxPQUFHLEFBQU8sUUFBQyxBQUFFLE1BQUksQUFBUyxBQUFDO0FBQ25DLFFBQUksQUFBUyxZQUFHLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBSyxNQUFDLEFBQU0sQUFBRSxBQUFDLEFBQUM7QUFDL0MsUUFBSSxBQUFrQjtBQUNwQixBQUFFLFlBQUUsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBSSxBQUFDLFFBQUcsQUFBUyxBQUFDO0FBQzFDLEFBQUssZUFBRSxBQUFTO0FBQ2hCLEFBQUksQUFDTCxBQUFDO0FBSnNFO0FBTXhFLEFBQXFCO0FBQ3JCLEFBQU0sV0FBQyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQWtCLEFBQUMsQUFBQyxBQUM1QztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJlcHJvY2VzcyB9IGZyb20gXCJAZ2xpbW1lci9zeW50YXhcIjtcbmltcG9ydCBUZW1wbGF0ZUNvbXBpbGVyLCB7IENvbXBpbGVPcHRpb25zIH0gZnJvbSBcIi4vdGVtcGxhdGUtY29tcGlsZXJcIjtcbmltcG9ydCB7IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2ssIFRlbXBsYXRlSmF2YXNjcmlwdCwgVGVtcGxhdGVNZXRhIH0gZnJvbSBcIkBnbGltbWVyL3dpcmUtZm9ybWF0XCI7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tIFwiQGdsaW1tZXIvaW50ZXJmYWNlc1wiO1xuaW1wb3J0IHsgUHJlcHJvY2Vzc09wdGlvbnMgfSBmcm9tIFwiQGdsaW1tZXIvc3ludGF4XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVJZEZuIHtcbiAgKHNyYzogc3RyaW5nKTogT3B0aW9uPHN0cmluZz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlY29tcGlsZU9wdGlvbnM8VCBleHRlbmRzIFRlbXBsYXRlTWV0YT4gZXh0ZW5kcyBDb21waWxlT3B0aW9uczxUPiwgUHJlcHJvY2Vzc09wdGlvbnMge1xuICBpZD86IFRlbXBsYXRlSWRGbjtcbn1cblxuZGVjbGFyZSBmdW5jdGlvbiByZXF1aXJlKGlkOiBzdHJpbmcpOiBhbnk7XG5cbmNvbnN0IGRlZmF1bHRJZDogVGVtcGxhdGVJZEZuID0gKCgpID0+IHtcbiAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLXJlcXVpcmUtaW1wb3J0cyAqL1xuICAgICAgY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgICAvKiB0c2xpbnQ6ZW5hYmxlOm5vLXJlcXVpcmUtaW1wb3J0cyAqL1xuXG4gICAgICBsZXQgaWRGbjogVGVtcGxhdGVJZEZuID0gc3JjID0+IHtcbiAgICAgICAgbGV0IGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpO1xuICAgICAgICBoYXNoLnVwZGF0ZShzcmMsICd1dGY4Jyk7XG4gICAgICAgIC8vIHRyaW0gdG8gNiBieXRlcyBvZiBkYXRhICgyXjQ4IC0gMSlcbiAgICAgICAgcmV0dXJuIGhhc2guZGlnZXN0KCdiYXNlNjQnKS5zdWJzdHJpbmcoMCw4KTtcbiAgICAgIH07XG5cbiAgICAgIGlkRm4oXCJ0ZXN0XCIpO1xuXG4gICAgICByZXR1cm4gaWRGbjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGlkRm4oKSB7IHJldHVybiBudWxsOyB9O1xufSkoKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFByZWNvbXBpbGVPcHRpb25zPFRlbXBsYXRlTWV0YT4gPSB7XG4gIGlkOiBkZWZhdWx0SWQsXG4gIG1ldGE6IHt9XG59O1xuXG4vKlxuICogQ29tcGlsZSBhIHN0cmluZyBpbnRvIGEgdGVtcGxhdGUgamF2YXNjcmlwdCBzdHJpbmcuXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqICAgICBpbXBvcnQgeyBwcmVjb21waWxlIH0gZnJvbSAnQGdsaW1tZXIvY29tcGlsZXInO1xuICogICAgIGltcG9ydCB7IHRlbXBsYXRlRmFjdG9yeSB9IGZyb20gJ2dsaW1lci1ydW50aW1lJztcbiAqICAgICBsZXQgdGVtcGxhdGVKcyA9IHByZWNvbXBpbGUoXCJIb3dkeSB7e25hbWV9fVwiKTtcbiAqICAgICBsZXQgZmFjdG9yeSA9IHRlbXBsYXRlRmFjdG9yeShuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyB0ZW1wbGF0ZUpzKSgpKTtcbiAqICAgICBsZXQgdGVtcGxhdGUgPSBmYWN0b3J5LmNyZWF0ZShlbnYpO1xuICpcbiAqIEBtZXRob2QgcHJlY29tcGlsZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBhIEdsaW1tZXIgdGVtcGxhdGUgc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGEgdGVtcGxhdGUgamF2YXNjcmlwdCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWNvbXBpbGU8VCBleHRlbmRzIFRlbXBsYXRlTWV0YT4oc3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQcmVjb21waWxlT3B0aW9uczxUPik6IFRlbXBsYXRlSmF2YXNjcmlwdDtcbmV4cG9ydCBmdW5jdGlvbiBwcmVjb21waWxlKHN0cmluZzogc3RyaW5nLCBvcHRpb25zOiBQcmVjb21waWxlT3B0aW9uczxUZW1wbGF0ZU1ldGE+ID0gZGVmYXVsdE9wdGlvbnMpOiBUZW1wbGF0ZUphdmFzY3JpcHQge1xuICBsZXQgYXN0ID0gcHJlcHJvY2VzcyhzdHJpbmcsIG9wdGlvbnMpO1xuICBsZXQgeyBibG9jaywgbWV0YSB9ID0gVGVtcGxhdGVDb21waWxlci5jb21waWxlKG9wdGlvbnMsIGFzdCk7XG4gIGxldCBpZEZuID0gb3B0aW9ucy5pZCB8fCBkZWZhdWx0SWQ7XG4gIGxldCBibG9ja0pTT04gPSBKU09OLnN0cmluZ2lmeShibG9jay50b0pTT04oKSk7XG4gIGxldCB0ZW1wbGF0ZUpTT05PYmplY3Q6IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2s8VGVtcGxhdGVNZXRhPiA9IHtcbiAgICBpZDogaWRGbihKU09OLnN0cmluZ2lmeShtZXRhKSArIGJsb2NrSlNPTiksXG4gICAgYmxvY2s6IGJsb2NrSlNPTixcbiAgICBtZXRhXG4gIH07XG5cbiAgLy8gSlNPTiBpcyBqYXZhc2NyaXB0XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0ZW1wbGF0ZUpTT05PYmplY3QpO1xufVxuIl19